<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奋斗的小鸟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://struggling-bird.cn/"/>
  <updated>2019-03-03T15:20:54.194Z</updated>
  <id>http://struggling-bird.cn/</id>
  
  <author>
    <name>奋斗的小鸟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven多模块应用的搭建和dubbo的整合</title>
    <link href="http://struggling-bird.cn/2019/03/03/blog17/"/>
    <id>http://struggling-bird.cn/2019/03/03/blog17/</id>
    <published>2019-03-03T06:31:00.000Z</published>
    <updated>2019-03-03T15:20:54.194Z</updated>
    
    <content type="html"><![CDATA[<p><strong>准备环境</strong>：<br>idea<br>jdk1.8<br>dubbo<br>zookeeper<br>springboot2.0</p><p><strong>一.先新建一个空的父工程 dubbo-application</strong><br>(1).创建一个空的Maven工程作为父Maven工程<br>(2).删除掉父工程里面的src文件夹 只保留pom,如图:<br><img src="/2019/03/03/blog17/1.png" alt="在这里插入图片描述"></p><p><strong>二.依此创建对应的maven的子模块，如图所示</strong><br>(1).选中父工程，右键选择new一个Module<br><img src="/2019/03/03/blog17/2.png" alt="在这里插入图片描述"></p><p>(2).直接点击next默认创建出空的Maven子模块<br><img src="/2019/03/03/blog17/3.png" alt="在这里插入图片描述"></p><p>(3).然后填写子模块的信息,如图:<br><img src="/2019/03/03/blog17/4.png" alt="在这里插入图片描述"><br>然后点击next，完善Module的信息，然后点击Finish。<br><img src="/2019/03/03/blog17/5.png" alt="在这里插入图片描述"><br>(4).如图便创建好了controller子模块，接下来我们一次创建别的子模块和子模块下的包结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">controller    工程的接口层                  com<span class="selector-class">.kk</span><span class="selector-class">.controller</span>        </span><br><span class="line">service       工程的服务层                  com<span class="selector-class">.kk</span><span class="selector-class">.service</span></span><br><span class="line">api           外部暴露的接口                com<span class="selector-class">.kk</span><span class="selector-class">.api</span></span><br><span class="line">rpc           注册到zk中提供服务的工程       com<span class="selector-class">.kk</span><span class="selector-class">.rpc</span></span><br><span class="line">dao           dao层，即数据库的连接层        com<span class="selector-class">.kk</span><span class="selector-class">.dao</span></span><br><span class="line">common        公共的组建和文件配置           com<span class="selector-class">.kk</span><span class="selector-class">.common</span></span><br><span class="line">domain        实体类所在的层                com<span class="selector-class">.kk</span><span class="selector-class">.domain</span></span><br></pre></td></tr></table></figure><p>创建完成之后如图所示：<br><img src="/2019/03/03/blog17/6.png" alt="在这里插入图片描述"><br>到此，项目的目录的创建就完成了。<br><strong>(三).接下来进行工程的配置</strong><br>因为是springboot整合dubbo进行分布式调用，这里就需要将rpc和controller分别作为服务的提供者和服务的调用者发布出去。<br>(1).首先,在父工程的pom包中引入项目中需要用到的依赖包，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span>.<span class="number">0</span>&lt;/modelVersion&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;groupId&gt;com.kk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Dubbo-Application&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-controller&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-service&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-api&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-common&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-domain&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-dao&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-application-rpc&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;springBoot.version&gt;<span class="number">2.0</span>.<span class="number">4</span>.RELEASE&lt;/springBoot.version&gt;</span><br><span class="line">        &lt;lombok.version&gt;<span class="number">1.16</span>.<span class="number">22</span>&lt;/lombok.version&gt;</span><br><span class="line">        &lt;spring.mybatis&gt;<span class="number">1.3</span>.<span class="number">1</span>&lt;/spring.mybatis&gt;</span><br><span class="line">        &lt;mysql&gt;<span class="number">5.1</span>.<span class="number">25</span>&lt;/mysql&gt;</span><br><span class="line">        &lt;mysql.druid&gt;<span class="number">0.2</span>.<span class="number">23</span>&lt;/mysql.druid&gt;</span><br><span class="line">        &lt;swagger.version&gt;<span class="number">2.6</span>.<span class="number">1</span>&lt;/swagger.version&gt;</span><br><span class="line">        &lt;fastjson.version&gt;<span class="number">1.2</span>.<span class="number">46</span>&lt;/fastjson.version&gt;</span><br><span class="line">        &lt;common<span class="selector-class">.lange</span><span class="selector-class">.version</span>&gt;<span class="number">3.8</span>.<span class="number">1</span>&lt;/common<span class="selector-class">.lange</span><span class="selector-class">.version</span>&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span>.<span class="number">4</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--spring-boot-starter-dubbo--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com<span class="selector-class">.gitee</span><span class="selector-class">.reger</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.1</span>.<span class="number">2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--lombok的版本号管理--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--spring的核心包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springBoot.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springBoot.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springBoot.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springBoot.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.mybatis</span><span class="selector-class">.spring</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.mybatis&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--数据库和链接池--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql.druid&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--swagger依赖文件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--redis的依赖包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--工具包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org<span class="selector-class">.apache</span><span class="selector-class">.commons</span>&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;common<span class="selector-class">.lange</span><span class="selector-class">.version</span>&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>(2).因为刚开始创建子模块的时候都是创建的空的子Maven模块，因为我们应该对controller和rpc进行改造为Springboot工程。<br>分别创建ControllerApplication和RpcApplication两个启动类,和application.yml文件配置如下：<br>ControllerApplication.java</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/14 17:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ComponentScan(basePackages = &#123;<span class="string">"com.kk.*"</span>&#125;)</span><br><span class="line">public class ControllerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ControllerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /dubbo-controller</span><br></pre></td></tr></table></figure><p>在controller包中，编写一个测试用例TestController.java，并且启动工程运行，再浏览器输入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试的类</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/14 18:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(<span class="string">"/test"</span>)</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return "test is ok";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现如下的结果，证明controller和rpc两个子模块已经完成。<br><img src="/2019/03/03/blog17/7.png" alt="在这里插入图片描述"></p><p><strong>四.接下来进行dubbo的整合,在这之前你需要先搭建好zookeeper，后续会出一篇关于zookeeper的搭建。</strong><br>(1).dubbo的包我在pom中已经引入了，支持最新的boot2.0<br>先配置controller的application.yml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: <span class="number">8761</span></span><br><span class="line">   servlet:</span><br><span class="line">     context-path: /dubbo-controller</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  dubbo:</span><br><span class="line">    scan:</span><br><span class="line">      base-packages: com<span class="selector-class">.kk</span><span class="selector-class">.controller</span></span><br><span class="line">    application:</span><br><span class="line">      id: dubbo-controller</span><br><span class="line">      name: dubbo-controller</span><br><span class="line">    protocol:</span><br><span class="line">      id: dubbo</span><br><span class="line">      name: dubbo</span><br><span class="line">    registry:</span><br><span class="line">      <span class="selector-tag">address</span>: zookeeper:<span class="comment">//zkserver:2181</span></span><br><span class="line">    consumer:</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">      check: true         # 服务启动时检查被调用服务是否可用</span><br><span class="line">      retries: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>(2). 在配置rpc的application.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8762</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /dubbo-rpc</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  dubbo:</span><br><span class="line">    scan:</span><br><span class="line">      base-packages: com<span class="selector-class">.kk</span><span class="selector-class">.rpc</span></span><br><span class="line">    application:</span><br><span class="line">      id: dubbo-rpc</span><br><span class="line">      name: dubbo-rpc</span><br><span class="line">    protocol:</span><br><span class="line">      id: dubbo</span><br><span class="line">      name: dubbo</span><br><span class="line">    registry:</span><br><span class="line">      <span class="selector-tag">address</span>: zookeeper:<span class="comment">//zkserver:2181</span></span><br><span class="line">    consumer:</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">      check: true      # 服务启动时检查被调用服务是否可用</span><br></pre></td></tr></table></figure><p><strong>五.基本上的配置就已经完成了，接下来测试一下！</strong><br>(1).先编写一个api的接口，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.api;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/15 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public interface TestService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 调用本地测试接口</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public String TestLocalServer(String str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 调用rpc测试接口</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public String TestRpcServer(String str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2).编写Rpc服务和本地自身调用的Service的实现类：<br> 本地：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.service;</span><br><span class="line"></span><br><span class="line">import com.kk.api.TestService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/15 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Service</span><br><span class="line">public class TestServiceImpl implements TestService&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用本地测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public String TestLocalServer(String str) &#123;</span><br><span class="line">        return "local server" + str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用rpc测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public String TestRpcServer(String str) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rpc：这里需要注意下，因为框架对dubbo的二次封装这边不能使用Dubbo的service发布服务，改用@Export<br>package com.kk.rpc;</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import com.kk.api.TestService;</span><br><span class="line">import com.reger.dubbo.annotation.Export;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/15 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Export</span><br><span class="line">public class TestServiceImpl implements TestService&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用本地测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public String TestLocalServer(String str) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用rpc测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param str</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public String TestRpcServer(String str) &#123;</span><br><span class="line">        return "rpc server" + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3).编写Controller的调用，这里可以用@Reference,也可以用@Inject，代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.controller;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line">import com.kk.api.TestService;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试的类</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2019/2/14 18:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Reference</span><br><span class="line">    private TestService testService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(<span class="string">"/test"</span>)</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return "test is ok";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(<span class="string">"/testRpc"</span>)</span><br><span class="line">    public String testRpc()&#123;</span><br><span class="line">        return testService.TestRpcServer(new Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4).然后分别启动Rpc和Controller的启动类，可以在Dubbo的监控台看到，即表示成功，f发布到zookeeper成功<br><img src="/2019/03/03/blog17/9.png" alt="在这里插入图片描述"></p><p>在浏览器输入，显示：<br><img src="/2019/03/03/blog17/10.png" alt="在这里插入图片描述"></p><p><strong>到此整合完成,附上代码地址  <a href="https://github.com/zhaokuankuan/Dubbo-Application" target="_blank" rel="noopener">github</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;准备环境&lt;/strong&gt;：&lt;br&gt;idea&lt;br&gt;jdk1.8&lt;br&gt;dubbo&lt;br&gt;zookeeper&lt;br&gt;springboot2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.先新建一个空的父工程 dubbo-application&lt;/strong&gt;&lt;br
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Springboot" scheme="http://struggling-bird.cn/tags/Springboot/"/>
    
      <category term="Dubbo" scheme="http://struggling-bird.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Redis的安装和详细配置</title>
    <link href="http://struggling-bird.cn/2018/08/30/blog16/"/>
    <id>http://struggling-bird.cn/2018/08/30/blog16/</id>
    <published>2018-08-30T06:31:00.000Z</published>
    <updated>2018-08-30T06:33:42.814Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一.Redis的优点：</strong><br>(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)<br>(2) 支持丰富数据类型，支持string，list，set，sorted set，hash<br>(3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<br>(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p><hr><p><strong>二.Redis的使用场景：</strong><br>(1)数据缓存：<br> 因为Redis是在内存中运行的数据库，因为对于处理请求来说响应速度较快，基于此我们可以将一些变更不太大的数据存入redis中，这样会减轻我们的数据库的压力同时还可以提高系统的性能，解决数据库的性能瓶颈<br> (2)会话缓存(session共享)<br> 随着分布式架构的流行，在集群部署的情况下当我们访问一个服务的时候可能会出现session的问题，虽然有不同的解决方法，如：session复制和session绑定等。但是对于性能方面来说，用外部缓存来管理redis可能是更好的方案了。<br> (3)消息队列<br> Redis提供了List和Set操作，因此可以用Redis来作为一个消息队列来处理。<br> (4)计数器和排行榜<br>  因为Redis支持set和zset两种方式的存储结构，因为我们可以用这种存储方式来进行计数器和排行榜的统计，可以从zset中存取出需要的排名段。<br> (5)发布和订阅<br> 发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！<br> 接下来，开始讲解Redis在Windows系统上面的安装和配置吧！</p><hr><p> <strong>三.先下载和配置Redis</strong><br>     由于Redis官方没有提供windows版本的安装包，因为我们需要自己下载个。<br>    我这里给出一个Github提供的安装包 <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>    如图：<br>    <img src="/2018/08/30/blog16/1.png" alt="这里写图片描述"><br>    下载下来之后，我们将下载的压缩包并且解压，如图：<br>    <img src="/2018/08/30/blog16/2.png" alt="这里写图片描述"><br>    接下里我们在Dos框中切入到redis的解压目录下，输入：redis-server.exe redis.windows.conf<br>    可以看到如下的输出狂，redis便启动了，如图：<br>  <img src="/2018/08/30/blog16/3.png" alt="这里写图片描述"><br>   redis在安装的时候默认是没有密码的，这里我们可以收到的修改Redis的密码：<br>   修改安装目录下的redis.windows.conf文件，增加 requirepass 密码，如图：<br> <img src="/2018/08/30/blog16/4.png" alt="这里写图片描述"><br>   数据库的配置就完成了。</p><hr><p><strong>四.客户端的链接</strong><br>    同理，服务器的窗口不能关，然后切入到redis的安装目录，输入<br>     redis-cli.exe -h 127.0.0.1 -p 6379<br>    出现如图便连接上了数据库<br>    <img src="/2018/08/30/blog16/5.png" alt="这里写图片描述"><br>    数据库的基本操作见后面的博文，随后更新！</p><hr><p> <strong>五.Redis的可视化工具安装(RedisDesktopManager)</strong><br>     首先下载下来之后双击打开之后出现，如图所示的界面：<br>   <img src="/2018/08/30/blog16/6.png" alt="这里写图片描述"><br>     开始我们创建一个链接，我的配置如图：<br>   <img src="/2018/08/30/blog16/7.png" alt="这里写图片描述"><br>    接下来，就可以用该工具操作Redis了。</p><hr><p>到这里，Redis在Windows上的安装和配置就全部完成了，后续我会出操作Redis数据库的五种数据结构的方法和用Java整合调用Redis的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一.Redis的优点：&lt;/strong&gt;&lt;br&gt;(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)&lt;br&gt;(2) 支持丰富数据类型，支持string，list，set，sorted set，h
      
    
    </summary>
    
      <category term="java" scheme="http://struggling-bird.cn/categories/java/"/>
    
    
      <category term="redis" scheme="http://struggling-bird.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java代码生成平台(Springboot+Mybatis+Swagger)</title>
    <link href="http://struggling-bird.cn/2018/08/23/blog15/"/>
    <id>http://struggling-bird.cn/2018/08/23/blog15/</id>
    <published>2018-08-23T08:45:16.000Z</published>
    <updated>2018-08-23T08:55:21.610Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java代码生成平台(Springboot+Mybatis+Swagger)</strong></p><p><a href="http://www.struggling-bird.cn/" target="_blank" rel="noopener">个人博客传送门</a></p><hr><p>由于最近本猿想做一个开源的项目，为了避免开发冗余代码的弊端，因此开始研究代码生成的工具，在看了<strong><a href="https://github.com/xuxueli/xxl-code-generator" target="_blank" rel="noopener">xxl</a></strong>的开源项目时眼前一亮，开始深入理解，但是后来随着深入的加深，发现由于技术的更新和开发的风格大不同，因此在该项目的基础上定制和升级，现将部署的项目分享给大家，可以自己定制化自己的工具，也可以直接用我的平台直接生成。</p><hr><p><strong>在这里我只讲解如何去使用本猿搭建的环境</strong>：</p><p>一.准备环境<br>  Springboot(Spring和SpingMVC),Mybatis,Swagger<br>  搭建好上面的环境之后便可以开始生成代码，如果不会搭建Springboot和Mybatis的环境，本猿已经默认集成了Swagger了。<br>  <a href="https://blog.csdn.net/zhaokk_git/article/details/81738366" target="_blank" rel="noopener">搭建教程传送门</a></p><hr><p> 二.生成代码</p><ol><li><p>打开生成平台</p><p><a href="http://coder.struggling-bird.cn:8080/create_code/#" target="_blank" rel="noopener">代码生成平台传送门</a></p><p>出现如图所示的界面，便开始生成代码了！ </p><p><img src="/2018/08/23/blog15/1.png" alt="这里写图片描述"></p></li></ol><p>2.已经给出了一个测试用的sql了，你可以直接点击按钮生成按钮，注意在生成的时候sql的格式需要如上图的测试sql所示。</p><p>3.生成的代码如图</p><p><img src="/2018/08/23/blog15/2.png" alt="这里写图片描述"></p><p>如上所示，所有的代码已经生成完毕了，接下来开始将生成的代码集成到我们的工程中去。</p><hr><p>三.将生成的代码集成到我们的工程中去<br>  1.先向大家展示一下我的项目的结构，对应的如下目录</p><p>   controller    service==》impl   dao   domain  mapper </p><p>  <img src="/2018/08/23/blog15/3.png" alt="这里写图片描述"></p><p>  2.需要修改的地方如下： 我们需要修改dao和domain的路径</p><p>  <img src="/2018/08/23/blog15/4.png" alt="这里写图片描述"></p><p> 3.接下来我们便可以运行项目，调用对应的接口进行调试了。</p><hr><p> 以上，便是生成代码的平台的具体的使用方法，大家可以根据自己的风格和需求定制化自己的生成工具！<br> <a href="https://github.com/zhaokuankuan/xxl-code-generator" target="_blank" rel="noopener">代码地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Java代码生成平台(Springboot+Mybatis+Swagger)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.struggling-bird.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Springboot" scheme="http://struggling-bird.cn/tags/Springboot/"/>
    
      <category term="Swagger" scheme="http://struggling-bird.cn/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>Springboot的用法之整合Swagger</title>
    <link href="http://struggling-bird.cn/2018/08/16/blog14/"/>
    <id>http://struggling-bird.cn/2018/08/16/blog14/</id>
    <published>2018-08-16T04:31:59.000Z</published>
    <updated>2018-08-16T04:54:49.778Z</updated>
    
    <content type="html"><![CDATA[<p>百度百科：Swagger的目标是为REST API 定义一个标准的，与语言无关的接口，使人和计算机在看不到源码或者看不到文档或者不能通过网络流量检测的情况下能发现和理解各种服务的功能。当服务通过Swagger定义，消费者就能与远程的服务互动通过少量的实现逻辑。类似于低级编程接口，Swagger去掉了调用服务时的很多猜测。</p><p>这个是百度百科的介绍，我自己的理解其实Swagger就是一个Restful接口的在线生成工具，可以动态的根据注解新增和修改展示的内容，解放了人力去维护和编写接口文档的工作量。解决了在接口修改的时候需要重新修改接口文档的问题。</p><hr><p>一.在<a href="https://blog.csdn.net/zhaokk_git/article/details/79608197" target="_blank" rel="noopener">上一节</a>的基础上引入Swagger的Jar包，以下是我的POM配置文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--swagger依赖文件--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.6</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.6</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><hr><p>二.配置Swagger的配置文件 ==&gt;Swagger.java</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.Springbootmanger.configure;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :Mr.kk</span></span><br><span class="line"><span class="comment"> * @date: 2018/8/14-17:07</span></span><br><span class="line"><span class="comment"> * springboot整合Swagger的入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class Swagger &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.kk.Springbootmanger.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置在线文档的基本信息</span></span><br><span class="line">    private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"springboot利用swagger构建api文档"</span>)</span><br><span class="line">                .description(<span class="string">"简单优雅的restfun风格，http://blog.csdn.net/zhaokk_git"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://blog.csdn.net/zhaokk_git"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>到此，Springboot整合Swagger的配置就已经全部完成，惊喜不惊喜，意外不意外!</code></pre><hr><p>三.接下来就是我们的使用了，分为两部分来介绍</p><ol><li><p>代码中需要的配置</p><p>我抛一下我的代码，一起来看一下常用的一些东西==》DemoController.java</p></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.Springbootmanger.controller;</span><br><span class="line"></span><br><span class="line">import com.kk.Springbootmanger.dao.UserDao;</span><br><span class="line">import io.swagger.annotations.Api;</span><br><span class="line">import io.swagger.annotations.ApiImplicitParam;</span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :zhaokk</span></span><br><span class="line"><span class="comment"> * @date: 2018/8/13 - 16:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@RestController</span><br><span class="line">@Api(value = <span class="string">"测试的demo"</span>,tags = &#123;<span class="string">"搭建环境的测试代码"</span>&#125;)</span><br><span class="line">public class DemoController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">"测试restful"</span>,notes = <span class="string">"测试工程"</span>)</span><br><span class="line">    @ApiImplicitParam(value = <span class="string">"姓名"</span>,name=<span class="string">"name"</span>)</span><br><span class="line">    @RequestMapping(value = <span class="string">"/hello"</span>,method = RequestMethod.GET)</span><br><span class="line">    public String sayHello(String name)&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value = <span class="string">"测试数据库连通性"</span>,notes = <span class="string">"测试数据库连通性"</span>)</span><br><span class="line">    @RequestMapping(value = <span class="string">"/getAll"</span>,method = &#123;RequestMethod<span class="selector-class">.GET</span>,RequestMethod.POST&#125;)</span><br><span class="line">    public Object getAll()&#123;</span><br><span class="line">        return userDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这个是官方的Wiki上的文档<br>          <img src="/2018/08/16/blog14/s1.png" alt="这里写图片描述"><br>       这个中文的翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">常用注解： </span><br><span class="line">- @Api()用于类； </span><br><span class="line">表示标识这个类是swagger的资源 ，即类的注释</span><br><span class="line">- @ApiOperation()用于方法； </span><br><span class="line">表示一个http请求的操作 ，即方法的注释</span><br><span class="line">- @ApiParam()用于方法，参数，字段说明； </span><br><span class="line">表示对参数的添加元数据（说明或是否必填等） ，即参数的注释</span><br><span class="line">- @ApiModel()用于类 </span><br><span class="line">表示对类进行说明，用于参数用实体类接收 ，即返回实体的注释</span><br><span class="line">- @ApiModelProperty()用于方法，字段 </span><br><span class="line">表示对model属性的说明或者数据操作更改 ，即对返回的实体的属性的注释</span><br><span class="line">- @ApiIgnore()用于类，方法，方法参数 </span><br><span class="line">表示这个方法或者类被忽略 ，即忽略此方法不现实</span><br><span class="line">- @ApiImplicitParam() 用于方法 </span><br><span class="line">表示单独的请求参数 ，即单个参数的注释</span><br><span class="line">- @ApiImplicitParams() 用于方法，包含多个 @ApiImplicitParam</span><br></pre></td></tr></table></figure><p> 2 界面的使用<br>   启动工程，然后访问<a href="http://localhost:8081/manager/swagger-ui.html则出现如图所示，即" target="_blank" rel="noopener">http://localhost:8081/manager/swagger-ui.html则出现如图所示，即</a></p><p><img src="/2018/08/16/blog14/s2.png" alt="这里写图片描述"></p><pre><code>具体看下以下几个常用的注解：</code></pre><ul><li>@Api(value = “测试的demo”,tags = {“搭建环境的测试代码”})<br><img src="/2018/08/16/blog14/s3.png" alt="这里写图片描述"></li></ul><hr><ul><li>@ApiOperation(value = “测试数据库连通性”,notes = “测试数据库连通性”)<br><img src="/2018/08/16/blog14/s4.png" alt="这里写图片描述"></li></ul><hr><ul><li>@ApiImplicitParam(value = “姓名”,name=”name”)<br><img src="/2018/08/16/blog14/s5.png" alt="这里写图片描述"></li></ul><hr><pre><code>同时，你还可以在上图所示的位置输入参数，点击Try it out ! 进行接口的测试</code></pre><hr><p>  到此，Springboot整合Swagger就已经全部完成了！代码已经上传到<a href="https://github.com/zhaokuankuan/Springboot-manger" target="_blank" rel="noopener">Github</a>上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;百度百科：Swagger的目标是为REST API 定义一个标准的，与语言无关的接口，使人和计算机在看不到源码或者看不到文档或者不能通过网络流量检测的情况下能发现和理解各种服务的功能。当服务通过Swagger定义，消费者就能与远程的服务互动通过少量的实现逻辑。类似于低级编程
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Springboot" scheme="http://struggling-bird.cn/tags/Springboot/"/>
    
      <category term="Swagger" scheme="http://struggling-bird.cn/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>Springboot的用法之整合Mybatis</title>
    <link href="http://struggling-bird.cn/2018/08/16/blog13/"/>
    <id>http://struggling-bird.cn/2018/08/16/blog13/</id>
    <published>2018-08-16T04:25:07.000Z</published>
    <updated>2018-08-16T04:54:44.728Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Springboot的用法之整合Mybatis</em></strong></p><hr><p>因为Springboot在现在的JaveWeb开发中使用越来越多，今天就出一个Springboot整合Mybatis的文章，因为Springboot一直崇尚的就是“约定大于配置”，因为在本篇只会有很少的配置文件。</p><hr><p>一.  准备工作<br>    首先你需要先创建好一个Springboot的工程，具体的步骤可参考上一篇==》<a href="https://blog.csdn.net/zhaokk_git/article/details/79608197" target="_blank" rel="noopener">springboot项目的搭建和基本的用法</a><br>    本文将使用的是Springboot2.0版本<br>    PS:开发的过程中最好启动热部署，那样的话会让工作量大大的减少。</p><hr><p>二 . 开始集成Mybatis</p><ol><li>首先需引入Mybatis和Mysql的相关依赖包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql的核心包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.45&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mybatis工具类--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--swagger依赖文件--&gt;</span><br></pre></td></tr></table></figure><p> 2 然后开始配置Springboot的配置文件，在application.yml中增加数据库的配置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#数据库的配置信息</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driverClassName: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/testuseUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">然后再开启sql的打印，增加如下配置：</span><br><span class="line">#配置sql的打印 //包路径为mapper文件包路径</span><br><span class="line">configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><ul><li><p>至此，配置已基本完成，我的工程的目录结构如图示：<br><img src="/2018/08/16/blog13/1.png" alt="这里写图片描述"></p><p>3 具体的代码实现：</p></li><li><p>controller==&gt;DemoController</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.Springbootmanger.controller;</span><br><span class="line"></span><br><span class="line">import com.kk.Springbootmanger.dao.UserDao;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.management.Query;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author :zhaokk</span></span><br><span class="line"><span class="comment"> * @date: 2018/8/13 - 16:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@RestController</span><br><span class="line">public class DemoController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = <span class="string">"/hello"</span>,method = RequestMethod.GET)</span><br><span class="line">    public String sayHello(String name)&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = <span class="string">"/getAll"</span>,method = &#123;RequestMethod<span class="selector-class">.GET</span>,RequestMethod.POST&#125;)</span><br><span class="line">    public Object getAll()&#123;</span><br><span class="line">        return userDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>domain==&gt;User.java</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.Springbootmanger.domain;</span><br><span class="line"></span><br><span class="line">import com.kk.Springbootmanger.common.UserSexEnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @author :Mr.kk</span></span><br><span class="line"><span class="comment">* @date: 2018/8/14/9:41</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public class User &#123;</span><br><span class="line"> private Long id;</span><br><span class="line"></span><br><span class="line"> private String userName;</span><br><span class="line"></span><br><span class="line"> private String passWord;</span><br><span class="line"></span><br><span class="line"> private UserSexEnum userEnum;</span><br><span class="line"></span><br><span class="line"> private String nickName;</span><br><span class="line"></span><br><span class="line"> public User() &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public User(Long id, String userName, String passWord, UserSexEnum userEnum, String nickName) &#123;</span><br><span class="line">     this.id = id;</span><br><span class="line">     this.userName = userName;</span><br><span class="line">     this.passWord = passWord;</span><br><span class="line">     this.userEnum = userEnum;</span><br><span class="line">     this.nickName = nickName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setId(Long id) &#123;</span><br><span class="line">     this.id = id;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setUserName(String userName) &#123;</span><br><span class="line">     this.userName = userName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setPassWord(String passWord) &#123;</span><br><span class="line">     this.passWord = passWord;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setUserEnum(UserSexEnum userEnum) &#123;</span><br><span class="line">     this.userEnum = userEnum;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setNickName(String nickName) &#123;</span><br><span class="line">     this.nickName = nickName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public Long getId() &#123;</span><br><span class="line">     return id;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public String getUserName() &#123;</span><br><span class="line">     return userName;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public String getPassWord() &#123;</span><br><span class="line">     return passWord;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public UserSexEnum getUserEnum() &#123;</span><br><span class="line">     return userEnum;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public String getNickName() &#123;</span><br><span class="line">     return nickName;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao==&gt;UserDao.java</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kk.Springbootmanger.dao;</span><br><span class="line"></span><br><span class="line">import com.kk.Springbootmanger.domain.User;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @author :Mr.kk</span></span><br><span class="line"><span class="comment">* @date: 2018/8/14-9:44</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">  <span class="comment">//全查</span></span><br><span class="line">  List&lt;User&gt; getAll();</span><br><span class="line">  <span class="comment">//根据id进行查询</span></span><br><span class="line">  User getOne(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper==&gt;UserMapper.xml</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.kk.Springbootmanger.dao.UserDao"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"com.kk.Springbootmanger.domain.User"</span> &gt;</span><br><span class="line">   &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"BIGINT"</span> /&gt;</span><br><span class="line">   &lt;result column=<span class="string">"userName"</span> property=<span class="string">"userName"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">   &lt;result column=<span class="string">"passWord"</span> property=<span class="string">"passWord"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">   &lt;result column=<span class="string">"user_sex"</span> property=<span class="string">"userEnum"</span> javaType=<span class="string">"com.kk.Springbootmanger.common.UserSexEnum"</span>/&gt;</span><br><span class="line">   &lt;result column=<span class="string">"nick_name"</span> property=<span class="string">"nickName"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;sql id=<span class="string">"Base_Column_List"</span> &gt;</span><br><span class="line">   id, userName, passWord, user_sex, nick_name</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getAll"</span> resultMap=<span class="string">"BaseResultMap"</span>  &gt;</span><br><span class="line">   SELECT</span><br><span class="line">   &lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;</span><br><span class="line">   FROM users</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getOne"</span> parameterType=<span class="string">"Long"</span> resultMap=<span class="string">"BaseResultMap"</span> &gt;</span><br><span class="line">   SELECT</span><br><span class="line">   &lt;include refid=<span class="string">"Base_Column_List"</span> /&gt;</span><br><span class="line">   FROM users</span><br><span class="line">   WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p> 5.至此，基本的配置文件和配置已经完成</p><hr><p>三.启动，验证<br>    启动该工程，然后访问 <a href="http://localhost:8081/manager/getAll" target="_blank" rel="noopener">http://localhost:8081/manager/getAll</a> ，如图所示即成功了，顺便看到控制台打印出来的sql,完整的代码已经上传至<a href="https://github.com/zhaokuankuan/springboot-mybatis" target="_blank" rel="noopener">Gihub</a><br>   <img src="/2018/08/16/blog13/2.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;Springboot的用法之整合Mybatis&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因为Springboot在现在的JaveWeb开发中使用越来越多，今天就出一个Springboot整合Mybatis的文章，因为Springboot一
      
    
    </summary>
    
      <category term="javaWeb" scheme="http://struggling-bird.cn/categories/javaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://struggling-bird.cn/tags/MyBatis/"/>
    
      <category term="Springboot" scheme="http://struggling-bird.cn/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Webpack+node构建web和App项目</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog1/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog1/</id>
    <published>2018-08-11T10:16:02.000Z</published>
    <updated>2018-08-12T09:22:43.771Z</updated>
    
    <content type="html"><![CDATA[<pre><code> 先说一下，本猿自今年接触到vue之后，感到vue全家桶之大，不能穷也，虽然这个框架的越来越成熟，越来越多的对应的组件框架伴随而出，例如，web端的elementUI,移动端的mintUi等。本猿在学习和使用了半年之久，然后粗略的总结下搭建和使用的过程，方便自己以后继续深入学习和帮助一下刚入门的新猿们。这次主要是以APP端的mintUI为例子讲解下，其实web端的elementUI和这个基本使用的方式一样。</code></pre><p> 一.环境的准备<br>     node ， vue ，mintUI<br>     首先下载node。<br>     js.Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的包管理器 npm，是全球最大的开源库生态系统。(介绍来自百度)<br>     下载完成之后可以在dos中输入： node -v   和   npm -v查看你所安装的node的版本，一般情况下你在安装好node后，自动就给你安装好了npm。<br>     接下来你需要安装淘宝镜像，具体的原因你可以百度，这里给小白说下，你不安装也是可以的，默认是npm是国外的，cnpm是国内的(淘宝)。npm install -g cnpm -registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>    安装完淘宝的镜像之后就可以安装Webpack了，我这里用cnpm装    cnpm install webpack -g 。(介绍来自百度) webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。<br>    安装完Webpack之后，现在就是安装vue的脚手架了，cnpm install vue-cli -g（给你们个建议，基本上我是在我需要创建项目的目录下安装这个脚手架的）。<br>    接下来就是见证奇迹的时刻了，就是创建我们的项目了，这个你想存放在哪个目录，你就cd到哪个目录之下执行， vue init webpack  项目名称。 然后你会进入一个引导的目录，根据目录填写你的项目名称和是否使用路由等。<br>    <img src="/2018/08/11/blog1/20171220162547881-1.png" alt="这里写图片描述"><br>     上面这个图来自网络，可以按照这个配置。到此所有的创建工作就全部完成了，然后 cd 到该项目底下   npm  run  dev ，在浏览器中localhost：8080 就可以看见你新创建的项目。<br>     二.下面上一下这个项目的目录结构</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── build --------------------------------- webpack相关配置文件</span><br><span class="line">│   ├── build.js --------------------------webpack打包配置文件</span><br><span class="line">│   ├── check-versions.js ------------------------------ 检查npm,nodejs版本</span><br><span class="line">│   ├── dev-client.js ---------------------------------- 设置环境</span><br><span class="line">│   ├── dev-server.js ---------------------------------- 创建express服务器，配置中间件，启动可热重载的服务器，用于开发项目</span><br><span class="line">│   ├── utils.js --------------------------------------- 配置资源路径，配置css加载器</span><br><span class="line">│   ├── vue-loader.conf.js ----------------------------- 配置css加载器等</span><br><span class="line">│   ├── webpack.base.conf.js --------------------------- webpack基本配置</span><br><span class="line">│   ├── webpack.dev.conf.js ---------------------------- 用于开发的webpack设置</span><br><span class="line">│   ├── webpack.prod.conf.js --------------------------- 用于打包的webpack设置</span><br><span class="line">├── config ---------------------------------- 配置文件</span><br><span class="line">├── node_modules ---------------------------- 存放依赖的目录</span><br><span class="line">├── src ------------------------------------- 源码</span><br><span class="line">│   ├── assets ------------------------------ 静态文件</span><br><span class="line">│   ├── components -------------------------- 组件</span><br><span class="line">│   ├── main.js ----------------------------- 主js</span><br><span class="line">│   ├── App.vue ----------------------------- 项目入口组件</span><br><span class="line">│   ├── router ------------------------------ 路由</span><br><span class="line">├── package.json ---------------------------- node配置文件</span><br><span class="line">├── .babelrc--------------------------------- babel配置文件</span><br><span class="line">├── .editorconfig---------------------------- 编辑器配置</span><br><span class="line">├── .gitignore------------------------------- 配置git可忽略的文件</span><br></pre></td></tr></table></figure><p> 到现在这个项目只是搭建好了一个Vue的架子，我们需要把我们需要的插件引入，可以利用 cnpm install  插件名称  导入插件，我这里导入一下mintUI的插件 cnpm install –save mint-ui   然后需要在main.js中引入刚才导入的mintui和css。<a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">这个是mintUI的官网</a><br>     import MintUI from ‘mint-ui’<br>     import ‘mint-ui/lib/style.css’<br>     Vue.use(MintUI)<br> 三.做好了准备工作，接下来就是我们的第一个项目了<br>         直接上几张效果图。<br>         <img src="/2018/08/11/blog1/20171220163848571-2.png" alt="这里写图片描述"></p><p>   这个有一个校验当没有账号和密码的时候，会提示让你填写，有的话就会跳转到这<br>   <img src="/2018/08/11/blog1/20171220164015050-3.png" alt="这里写图片描述"><br>   然后我把我的代码上传到github上，你们可以down。<a href="https://github.com/zhaokuankuan/app.git" target="_blank" rel="noopener">https://github.com/zhaokuankuan/app.git</a><br>    提示一下，你们在安装的时候需要安装好node 然后 cd到down下来的目录下，cnpm install  就安装完成好所有的jar包，然后npm  run   dev就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt; 先说一下，本猿自今年接触到vue之后，感到vue全家桶之大，不能穷也，虽然这个框架的越来越成熟，越来越多的对应的组件框架伴随而出，例如，web端的elementUI,移动端的mintUi等。本猿在学习和使用了半年之久，然后粗略的总结下搭建和使用的过程，方便
      
    
    </summary>
    
      <category term="Web前端" scheme="http://struggling-bird.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://struggling-bird.cn/tags/Vue/"/>
    
      <category term="Node" scheme="http://struggling-bird.cn/tags/Node/"/>
    
      <category term="Webpack" scheme="http://struggling-bird.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud微服务架构之路由网关(zuul)</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog4/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog4/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:32:43.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Springcloud微服务架构之路由网关(zuul)</strong></p><p><strong>Zuul的主要功能是路由转发和过滤器:</strong><br>    <strong>1.路由功能是微服务的一部分</strong>，比如将 API-A转发到service-hi服务,zuul默认和Ribbon结合        实现了负载均衡的功能。<br>    <strong>2.zuul不仅只是路由，并且还能过滤，做一些安全验证</strong>。</p><hr><p><strong>一．    接下来我们分别看一下，Zuul的路由转发和过滤器</strong><br>        首先还是在上一节的<a href="https://blog.csdn.net/zhaokk_git/article/details/80228880" target="_blank" rel="noopener">服务的注册和发现</a>的基础上进行的，我们需要先启动Server(服务的注册中心):8761，然后启动我们的一个服务Service(需要注册的服务):8762。<br><strong>二．    路由转发：路由功能是微服务的一部分，比如将API-A转发到service-hi</strong><br><strong>a)    创建一个module项目rest-client</strong><br> <img src="/2018/08/11/blog4/2018052415363735-1.png" alt="这里写图片描述"><br><strong>b)    然后新建一个appliacation.yml,</strong>配置内容如下，我们将这个服务注册进eureka注册中心中，然后设置zuul的路由，当访问API-A 的时候我们将请求的理由到service-HI服务中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8088</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">     defaultZone: http://localhost:8761/eureka</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    API-A:</span><br><span class="line">      path: /API-A/**</span><br><span class="line">      serviceId: SERVICE-HI</span><br></pre></td></tr></table></figure><p><strong>c)   然后我们修改RestClientApplication 这个类，增加zuul开启路由的注解</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class RestClientApplication &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(RestClientApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>d)    分别访问<a href="http://localhost:8761/你会看到如下的图示" target="_blank" rel="noopener">http://localhost:8761/你会看到如下的图示</a></strong>，有我们注入的zuul和需要路由的serice-hi服务。<br> <img src="/2018/08/11/blog4/2018052415365712-2.png" alt="这里写图片描述"><br>在访问<strong><a href="http://localhost:8088/API-A/hello?name=kk" target="_blank" rel="noopener">http://localhost:8088/API-A/hello?name=kk</a></strong>，你会看到，我们的如图所示，即我们的路由已经成功的将api-a转发到了serive-hi的服务，并且输出了service-hi的端口，具体的代码可以看<strong>文章的结尾</strong>。</p><p><img src="/2018/08/11/blog4/20180524153705952-3.png" alt="这里写图片描述"><br><strong>三   过滤功能：zuul不仅可以做为路由使用，还可以用作过滤来做一些逻辑操作</strong><br><strong>a)    在上面的基础上进行改造，创建一个类MyFilter具体的说明已经注释出来了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author :zhaokk</span><br><span class="line"> * @date: 2018/5/11 - 14:58</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class MyFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(ZuulFilter.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;pre&quot;;</span><br><span class="line">        //pre：路由之前</span><br><span class="line">        //routing：路由之时</span><br><span class="line">        //post： 路由之后</span><br><span class="line">        //error：发送错误调用</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 0;   //优先级  0 最高</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        return true; //true为永远过滤</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() throws ZuulException &#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest httpServletRequest = requestContext.getRequest();</span><br><span class="line">        Object o = httpServletRequest.getParameter(&quot;token&quot;);</span><br><span class="line">        if(o == null)&#123;</span><br><span class="line">            logger.warn(&quot;token is empty&quot;);</span><br><span class="line">            requestContext.setSendZuulResponse(false);</span><br><span class="line">            requestContext.setResponseStatusCode(401);</span><br><span class="line">            try &#123;</span><br><span class="line">                requestContext.getResponse().getWriter().write(&quot;token is empty!&quot;);</span><br><span class="line">            &#125;catch (Throwable throwable)&#123;</span><br><span class="line">                return  null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(&quot;ok&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>b)    然后我们继续访问<a href="http://localhost:8088/API-A/hello?name=kk" target="_blank" rel="noopener">http://localhost:8088/API-A/hello?name=kk</a></strong>，这时你会看到，界面如图，因为我们的代码中获取不到token，所以被拦截了，<br><img src="/2018/08/11/blog4/20180524153718401-4.png" alt="这里写图片描述"><br> <strong>c） 当我们输入<a href="http://localhost:8088/API-A/hello?name=kk&amp;token=22" target="_blank" rel="noopener">http://localhost:8088/API-A/hello?name=kk&amp;token=22</a></strong>，会显示 如下的界面，即我们的过滤功能有效了！<br><img src="/2018/08/11/blog4/20180524153724592-5.png" alt="这里写图片描述"></p><p>附上我的完整的博文：<br><strong><a href="https://blog.csdn.net/zhaokk_git/article/details/80228420" target="_blank" rel="noopener">从零开始学习SpringCloud</a></strong><br><strong><a href="https://github.com/zhaokuankuan/springcloud/tree/master/SpringCloudZuul" target="_blank" rel="noopener">代码地址</a></strong><br><strong>在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！</strong><br> <a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">方志鹏的springcloud微服务架构</a><br> <a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">纯洁的微笑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Springcloud微服务架构之路由网关(zuul)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zuul的主要功能是路由转发和过滤器:&lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;1.路由功能是微服务的一部分&lt;/strong&gt;，比如将 API-A
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="SpringCloud" scheme="http://struggling-bird.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringMVC的文件上传</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog12/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog12/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-11T10:30:00.639Z</updated>
    
    <content type="html"><![CDATA[<p>由于是一个新手菜鸟，所以说对很多东西都不是很了解，最近刚好在做一个项目需要做文件的上传和下载，以前直接是用写好的，这个自己动手写了一下用了半天时间跟大家分享一下。</p><p>一.环境是SSM+Maven</p><pre><code>首先，你需要搭建好springMC的环境，如果不会搭建的话请自己百度，他会告诉你的。</code></pre><p>二.导入需要的Jar包</p><p>因为这个附件的上传和下载是基于SpringMVC做的，因此我们需要导入一下jar包。如下，我直接在pom中引入就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>三.接下来比较重要了，就是需要去配置下你的springMVC的配置文件，配置信息如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line">        class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 上传文件大小上限，单位为字节（10MB） --&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot;&gt;</span><br><span class="line">            &lt;value&gt;10485760&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot;&gt;</span><br><span class="line">            &lt;value&gt;UTF-8&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line">        class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 上传文件大小上限，单位为字节（10MB） --&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot;&gt;</span><br><span class="line">            &lt;value&gt;10485760&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot;&gt;</span><br><span class="line">            &lt;value&gt;UTF-8&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>四。接下来就是写html界面(最重要的一点是一定要在form中加上 enctype=”multipart/form-data” )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form enctype=&quot;multipart/form-data&quot;  action=&quot;http://localhost:8080/yangfan-server/upload&quot; method=&quot;post&quot; &gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br><span class="line">    参数inputStr:&lt;input type=&quot;text&quot; name=&quot;des&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;文件下载&lt;/h3&gt;</span><br><span class="line">&lt;a href=&quot;download?filename=50769870/Desert.jpg&quot;&gt;</span><br><span class="line">  Penguins.jpg</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>五.接下来就是controller的实现</p><p>这个是文件上传的，因为我自己写了一个方法来生成一个随机的路径，你们也可以自己定义自己的路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//上传文件会自动绑定到MultipartFile中</span><br><span class="line">    @RequestMapping(value=&quot;/upload&quot;,method=&#123;RequestMethod.POST&#125;)</span><br><span class="line">    public Result upload(HttpServletRequest request,</span><br><span class="line">           @RequestParam(&quot;des&quot;) String des,</span><br><span class="line">           @RequestParam(&quot;file&quot;) MultipartFile file) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    Result result = new Result();</span><br><span class="line">       System.out.println(des);</span><br><span class="line">       //如果文件不为空，写入上传路径</span><br><span class="line">       if(!file.isEmpty()) &#123;</span><br><span class="line">       long uuid = NumberUtil.createId();</span><br><span class="line">       //上传文件路径</span><br><span class="line">       String path = request.getServletContext().getRealPath(&quot;/images/&quot;) + File.separator + uuid;</span><br><span class="line">           //上传文件名</span><br><span class="line">           String filename = file.getOriginalFilename();</span><br><span class="line">           File filepath = new File(path,filename);</span><br><span class="line">           //判断路径是否存在，如果不存在就创建一个</span><br><span class="line">           if (!filepath.getParentFile().exists()) &#123;</span><br><span class="line">               filepath.getParentFile().mkdirs();</span><br><span class="line">           &#125;</span><br><span class="line">           //将上传文件保存到一个目标文件当中</span><br><span class="line">           file.transferTo(new File(path + File.separator +filename));</span><br><span class="line">           result.setSuccess(true);</span><br><span class="line">           result.addDefaultModel(&quot;fileName&quot;, &quot;fileName&quot;);</span><br><span class="line">           result.addDefaultModel(&quot;fileDownLoad&quot;,uuid+&quot;/&quot;+filename);</span><br><span class="line">           return result;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return result;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个是下载的deomo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/download&quot;,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class="line">   public ResponseEntity&lt;byte[]&gt; download(HttpServletRequest request,</span><br><span class="line">           @RequestParam(&quot;filename&quot;) String filename,</span><br><span class="line">           Model model)throws Exception &#123;</span><br><span class="line">      //下载文件路径</span><br><span class="line">      String path = request.getServletContext().getRealPath(&quot;/images/&quot;);</span><br><span class="line">      File file = new File(path + File.separator + filename);</span><br><span class="line">      HttpHeaders headers = new HttpHeaders();</span><br><span class="line">      //下载显示的文件名，解决中文名称乱码问题</span><br><span class="line">      String downloadFielName = new String(filename.getBytes(&quot;UTF-8&quot;),&quot;iso-8859-1&quot;);</span><br><span class="line">      String[] strArr = downloadFielName.split(&quot;/&quot;);</span><br><span class="line">      //通知浏览器以attachment（下载方式）打开图片</span><br><span class="line">      headers.setContentDispositionFormData(&quot;attachment&quot;, strArr[1]);</span><br><span class="line">      //application/octet-stream ： 二进制流数据（最常见的文件下载）。</span><br><span class="line">      headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">      return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file),</span><br><span class="line">              headers, HttpStatus.CREATED);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上就是上传和下载的代码了，不过现在只是上传单个文件的，后续会加上多个文件的批量操作的。</p><p>欢迎转载，请注明出处</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于是一个新手菜鸟，所以说对很多东西都不是很了解，最近刚好在做一个项目需要做文件的上传和下载，以前直接是用写好的，这个自己动手写了一下用了半天时间跟大家分享一下。&lt;/p&gt;
&lt;p&gt;一.环境是SSM+Maven&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先，你需要搭建好springMC的
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://struggling-bird.cn/tags/Spring/"/>
    
      <category term="SpringMvc" scheme="http://struggling-bird.cn/tags/SpringMvc/"/>
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>亲测javaWeb的Excel的文件导入</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog10/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog10/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-11T10:21:58.326Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近在做一个web项目，需要写一个Excel文件的导入，由于本猿是个刚入行不就的萌新，所以找到了一些文章研究了一下，但是讲的都比较混乱，于是在一边借阅一边的摸索中完成了导入，先说一下思路：1.首先是将需要导入的文档转换成流的形式。2.判断excel文件的类型是.xlsx还是.xls格式的，将对应的格式转换成Workbook所对应的格式，到了此处基本上一个excl文件就已经被导入了，并且存储为对应的excl格式了。3.此方法workbook.getSheetAt()可以得到你的这个文件上的所有的sheet，我的sheet默认只有一个所以我直接取的是sheet(0)。4.然后遍历此sheet得到所有的Row，将每行的数据add到list中并且返回。5.然后遍历每一行的，得到对应的元素上的信息，这里需要注意一下，这个row.getCell(0)方法是从0开始的，然后就得到了你所需要到倒数的数据了，剩下的事情就是业务的处理啦。下来我上一下，我的具体的做法。</code></pre><p>一.环境和所需要引入的jar包。<br>    环境：<br>    ssm+maven<br>    具体的文件的上传可以查看我的上一篇博客<br>    <a href="http://blog.csdn.net/zhaokk_git/article/details/78339248" target="_blank" rel="noopener">基于springMVC的文件上传和下载</a><br>    这里需要注意的是这里我们需要引入支持解析excl的工具类poi，我是直接maven直接导入的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  导入和导出excel时需要的jar包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.xmlbeans&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;xmlbeans&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>到此，前期的环境的准备工作就已经全部完成了。<br>二.代码</p><h2 id="导入的方法的接口"><a href="#导入的方法的接口" class="headerlink" title="导入的方法的接口"></a>导入的方法的接口</h2><pre><code>这里需要注意下，这里的Result的是我自己定义的一个类，你们在引用的时候自己重写下就可以了，用Object就可以，返回个map就可以了。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import com.yonyouFintech.yangfan.commons.Result;</span><br><span class="line">import com.yonyouFintech.yangfan.commons.util.DateUtil;</span><br><span class="line">import com.yonyouFintech.yangfan.commons.util.ExcelUtil;</span><br><span class="line">import com.yonyouFintech.yangfan.domain.YfBibliographic;</span><br><span class="line">import com.yonyouFintech.yangfan.service.YfBibliographicService;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class yfImportExclController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private YfBibliographicService yfBibliographicService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/exclImport&quot;,method = RequestMethod.POST)</span><br><span class="line">    public Result importExcl(@RequestParam(&quot;file&quot;) MultipartFile excl, HttpServletRequest request)&#123;</span><br><span class="line">        Result result = new Result();</span><br><span class="line">        if(!excl.isEmpty())&#123;//说明文件不为空</span><br><span class="line">            try &#123;</span><br><span class="line">                String fileName = excl.getOriginalFilename();</span><br><span class="line">                InputStream is = excl.getInputStream();//转化为流的形式</span><br><span class="line">                List&lt;YfBibliographic&gt; listMer = new ArrayList&lt;YfBibliographic&gt;();</span><br><span class="line">                List&lt;Row&gt; list = ExcelUtil.getExcelRead(fileName,is, true);</span><br><span class="line">                //首先是读取行 也就是一行一行读，然后在取到列，遍历行里面的行，根据行得到列的值</span><br><span class="line">                for (Row row : list) &#123;</span><br><span class="line">                    /****************得到每个元素的值start**********************/</span><br><span class="line">                    Cell cell_0 = row.getCell(0);</span><br><span class="line">                    Cell cell_1 = row.getCell(1);</span><br><span class="line">                    Cell cell_2 = row.getCell(2);</span><br><span class="line">                    Cell cell_3 = row.getCell(3);</span><br><span class="line">                    /*****************得到每个元素的值end**********************/</span><br><span class="line">                    /******************解析每个元素的值start*******************/</span><br><span class="line">                    //得到列的值，也就是你需要解析的字段的值</span><br><span class="line">                    String bookName = ExcelUtil.getValue(cell_0);</span><br><span class="line">                    String   editor = ExcelUtil.getValue(cell_1);</span><br><span class="line">                    String  express = ExcelUtil.getValue(cell_2);</span><br><span class="line">                    String  version = ExcelUtil.getValue(cell_3);</span><br><span class="line">                    /******************解析每个元素的值end*******************/</span><br><span class="line">                    /****************将读取出来的数值进行包装start***********/</span><br><span class="line">                    YfBibliographic yfBibliographic = new YfBibliographic();</span><br><span class="line">                    yfBibliographic.setName(bookName);</span><br><span class="line">                    yfBibliographic.setAuthor(editor);</span><br><span class="line">                    yfBibliographic.setPress(express);</span><br><span class="line">                    yfBibliographic.setEdition(version);</span><br><span class="line">                    yfBibliographic.setStatus(&quot;1&quot;);</span><br><span class="line">                    yfBibliographic.setExtend1(DateUtil.getCurDateStr());</span><br><span class="line">                    listMer.add(yfBibliographic);</span><br><span class="line">                    /**************将读取出来的数值进行包装end**************/</span><br><span class="line">                &#125;</span><br><span class="line">                if(listMer.size()&gt;0)&#123;</span><br><span class="line">                    for (YfBibliographic item:listMer) &#123;</span><br><span class="line">                        yfBibliographicService.insertYfBibliographic(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result.setSuccess(true);</span><br><span class="line">                result.setSuccessMessage(&quot;导入成功！&quot;);</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                result.setSuccess(false);</span><br><span class="line">                result.setErrorMessage(&quot;导入出现异常！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result.setSuccess(false);</span><br><span class="line">            result.setErrorMessage(&quot;导入的文件为空！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断文件类型的工具类"><a href="#判断文件类型的工具类" class="headerlink" title="判断文件类型的工具类"></a>判断文件类型的工具类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author zhaokk</span><br><span class="line"> * @Date 2017-12-01</span><br><span class="line"> * 工具类验证Excel文档</span><br><span class="line"> */</span><br><span class="line">public class WDWUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：是否是2003的excel，返回true是2003</span><br><span class="line">     * @param filePath</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isExcel2003(String filePath)  &#123;</span><br><span class="line">        return filePath.matches(&quot;^.+\\.(?i)(xls)$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @描述：是否是2007的excel，返回true是2007</span><br><span class="line">     * @param filePath</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isExcel2007(String filePath)  &#123;</span><br><span class="line">        return filePath.matches(&quot;^.+\\.(?i)(xlsx)$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证是否是EXCEL文件</span><br><span class="line">     * @param filePath</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean validateExcel(String filePath)&#123;</span><br><span class="line">        if (filePath == null || !(isExcel2003(filePath) || isExcel2007(filePath)))&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取excel表格，每行的数据的类"><a href="#获取excel表格，每行的数据的类" class="headerlink" title="获取excel表格，每行的数据的类"></a>获取excel表格，每行的数据的类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.HSSFCell;</span><br><span class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.Row;</span><br><span class="line">import org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class ExcelUtil &#123;</span><br><span class="line">    //读取文件的方法</span><br><span class="line">    /**</span><br><span class="line">     * 获取解析文件行数据</span><br><span class="line">     * @param fileName : 文件地址</span><br><span class="line">     * @param isTitle  : 是否过滤第一行解析</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;Row&gt; getExcelRead(String fileName, InputStream is, boolean isTitle) throws Exception&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //判断其兼容版本 调用了判断版本的方法</span><br><span class="line">            Workbook workbook = getWorkbook(fileName,is);</span><br><span class="line">            Sheet sheet = workbook.getSheetAt(0);</span><br><span class="line">            int count = 0;</span><br><span class="line">            List&lt;Row&gt; list = new ArrayList&lt;Row&gt;();</span><br><span class="line">            for (Row row : sheet) &#123;</span><br><span class="line">                // 跳过第一行的目录</span><br><span class="line">                if (count == 0 &amp;&amp; isTitle) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(row);</span><br><span class="line">            &#125;</span><br><span class="line">            return list;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//判断版本的方法</span><br><span class="line"></span><br><span class="line">    public static Workbook getWorkbook(String fileName,InputStream is) throws Exception&#123;</span><br><span class="line">        Workbook workbook = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            /** 判断文件的类型，是2003还是2007 */</span><br><span class="line">            boolean isExcel2003 = true;</span><br><span class="line">            if (WDWUtil.isExcel2007(fileName)) &#123;</span><br><span class="line">                isExcel2003 = false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (isExcel2003) &#123;</span><br><span class="line">                workbook = new HSSFWorkbook(is);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                workbook = new XSSFWorkbook(is);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">        return workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //得到celL值的方法：</span><br><span class="line">    public static String getValue(Cell cell)&#123;</span><br><span class="line">        if(cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN)&#123;</span><br><span class="line">            return String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">        &#125;else if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)&#123;</span><br><span class="line">            double value = cell.getNumericCellValue();</span><br><span class="line">            return new BigDecimal(value).toString();</span><br><span class="line">        &#125;else if (cell.getCellType() ==HSSFCell.CELL_TYPE_STRING)&#123;</span><br><span class="line">            return String.valueOf(cell.getStringCellValue());</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return String.valueOf(cell.getStringCellValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>以上，就是本猿的导入的方法和思路，亲测有效，完美运行，作为一个新手猿，可能会有很多不足，请诸君在阅览的时候，发现有不足的地方请多多指教，转载请注明出处。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;最近在做一个web项目，需要写一个Excel文件的导入，由于本猿是个刚入行不就的萌新，所以找到了一些文章研究了一下，但是讲的都比较混乱，于是在一边借阅一边的摸索中完成了导入，先说一下思路：
1.首先是将需要导入的文档转换成流的形式。
2.判断excel文件的
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://struggling-bird.cn/tags/Spring/"/>
    
      <category term="SpringMvc" scheme="http://struggling-bird.cn/tags/SpringMvc/"/>
    
      <category term="MyBatis" scheme="http://struggling-bird.cn/tags/MyBatis/"/>
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="POI" scheme="http://struggling-bird.cn/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>程序员的一首诗</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog3/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog3/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:28:19.058Z</updated>
    
    <content type="html"><![CDATA[<p>我能抽象出整个世界..<br>但是我不能抽象你..</p><p>因为你在我心中是那么的具体…<br>所以我的世界并不完整.</p><p>我可以重载甚至覆盖这个世界里的任何一种方法…<br>但是我却不能重载对你的思念…</p><p>也许命中注定了.你在我的世界里是永远的烙上了静态的属性…<br>而我不慎调用了爱你这个方法..</p><p>当我义无返顾的把自己作为参数传进这个方法时…<br>我才发现爱上你是一个死循环..</p><p>它不停的返回对你的思念压入我的心里的堆栈..<br>在这无尽的黑夜中…</p><p>我的内存里已经再也装不下别人…<br>我不停的向系统申请空间..<br>但却捕获一个异常–我爱的人不爱我…<br>为了解决这个异常…<br>我愿意虚拟出最后一点内存..<br>把所有我能实现的方法地址压入堆栈..<br>并且在栈尾压入最后一个方法–将字符串”我爱你，你爱我吗 “传递给你..<br>如果返回的值为真–我将用尽一生去爱你…</p><p>否则—我将释放掉所有系统资源…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我能抽象出整个世界..&lt;br&gt;但是我不能抽象你..&lt;/p&gt;
&lt;p&gt;因为你在我心中是那么的具体…&lt;br&gt;所以我的世界并不完整.&lt;/p&gt;
&lt;p&gt;我可以重载甚至覆盖这个世界里的任何一种方法…&lt;br&gt;但是我却不能重载对你的思念…&lt;/p&gt;
&lt;p&gt;也许命中注定了.你在我的世界里是永远的
      
    
    </summary>
    
      <category term="杂谈" scheme="http://struggling-bird.cn/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://struggling-bird.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习SpringCloud</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog2/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog2/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:26:38.268Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&#160; &#160; &#160;前段时间把SpringBoot刷了一遍，感觉是时候深入研究一下微服务架构了，在网上看到了方志鹏的书，觉得不错便关注了他的博客，由于前期一直关注微笑并且跟着微笑的达人课完成了SpringBoot的入门，因此在此感谢两位大佬，令附上两位大佬的博客地址。</strong> ==》<strong><a href="https://blog.csdn.net/zhaokk_git/article/details/79608197" target="_blank" rel="noopener">springboot的入门</a></strong><br>  &#160; &#160; &#160;我将springcloud处理微服务架构分为下面的模块进行慢慢的蚕食：<br>  &#160; &#160; &#160;1. <a href="https://blog.csdn.net/zhaokk_git/article/details/80228880" target="_blank" rel="noopener">服务的注册和发现</a><br>  &#160; &#160; &#160;2.  <a href="https://blog.csdn.net/zhaokk_git/article/details/80267799" target="_blank" rel="noopener">断路器</a><br> &#160; &#160; &#160;3. <a href="https://blog.csdn.net/zhaokk_git/article/details/80256356" target="_blank" rel="noopener">服务调用</a><br>&#160; &#160; &#160;4. <a href="https://blog.csdn.net/zhaokk_git/article/details/80435355" target="_blank" rel="noopener">路由网关</a><br> &#160; &#160; &#160;5. 分布式配置中心<br> &#160; &#160; &#160;6. 消息总线<br> &#160; &#160; &#160;7. 服务链路追踪<br> &#160; &#160; &#160;<br>  <strong>&#160; &#160; &#160;未完待续中。。。</strong></p><p>  &#160; &#160; &#160;附上我的github地址，<a href="https://github.com/zhaokuankuan/springcloud" target="_blank" rel="noopener">从零开始学习springcloud</a><br> <strong>以下是我自己对上述模块的认识和分析：</strong></p><blockquote><p> &#160; &#160; &#160;1. 在服务的注册和发现和调用之间有三个模块： 注册中心,服务提供者，服务消费者  &#160;<br>&#160; &#160;2. 启动的时候先启动注册中心==》提供者==》消费者  &#160; &#160;<br>&#160;3.可以对注册中心进行负载均衡也可以对服务的调用进行负载均衡对注册中心：通过修改 <code>defaultZone:http://localhost:8761/eureka/，http://localhost:8762/eureka/，http://localhost:8763/eureka/</code>来实现<br>&#160; &#160; &#160;对服务的调用： ribbon + resttmplate 是客户端的一种负载均衡的方式<br>&#160; &#160; &#160;feign :原理也是基于ribbon实现的。只需要创建一个接口并注解。它具有可插拔的注解特<br>性，可使用Feign<br>注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。<br>&#160; &#160; &#160;4.<br>断路器：为了保证服务的高可用，引入了断路器的概念，当访问一个服务的不可用得到了一定的阈值时，断路器将会被打开<br>    &#160; &#160; &#160;两种实现：<br>         &#160; &#160; &#160;   (1).restTemplate 和 ribbon 方式，需要在调用的服务上增加熔断的方法即可<br>      &#160; &#160; &#160;      (2).feign，需要在接口的FeignClient注解中增加callback方法即可，指向该接口的实现类，该实现类中重写的方法即出现断路时调用的方法。<br>&#160; &#160; &#160;5.路由网关<br>(zuul)：主要做的是路由的转发和过滤，zuul默认和Ribbon结合实现了负载均衡的功能。<br>      &#160; &#160; &#160;      (1).路由的转发，类似于nigix反向代理，将对应的路径代理到对应的服务器上去<br>         &#160; &#160; &#160;   (2).路由的过滤，通过自定义过滤器，然后继承zuulfilter来自定义过滤的类型和优先级和逻辑等 &#160; &#160;<br>&#160;6.分布式配置中心(Configure)：在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件<br>          &#160; &#160; &#160;  分为两个角色：分别是配置的服务器和配置的客户端<br>            &#160; &#160; &#160;延伸到微服务可以将配置中心做成一个微服务，并且将其集群 &#160; &#160;<br>&#160;7.消息总线(Bus)：消息总线将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控<br>                &#160; &#160; &#160;主要是rabbitmq的用法 &#160; &#160; &#160;8.服务链路追踪(Sleuth):在分布式系统中提供追踪解决方案<br>            &#160; &#160; &#160;  对于微服务架构，启动的时候会启动一个Trace，一系列spans组成的一个树状结构<br>             &#160; &#160; &#160;  在访问的时候会跟随目前访问的位置和所用的时间，可以快速的反应和查找问题<br>               &#160; &#160; &#160;  ZipkinServer ==》用来收集调用信息 &#160; &#160; &#160; 9.docker部署springcloud项目 &#160; &#160;<br>&#160;10.服务注册(consul):它是一个提供服务发现和配置的工具,consul具有分布式、高可用、高扩展性。</p></blockquote><p><strong>以上学习资源来自：</strong><br><a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">方志鹏的springcloud微服务架构</a><br><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">纯洁的微笑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&amp;#160; &amp;#160; &amp;#160;前段时间把SpringBoot刷了一遍，感觉是时候深入研究一下微服务架构了，在网上看到了方志鹏的书，觉得不错便关注了他的博客，由于前期一直关注微笑并且跟着微笑的达人课完成了SpringBoot的入门，因此在此感谢两位大
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="SpringCloud" scheme="http://struggling-bird.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>java后台实现生成二维码并且上传的详细介绍</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog11/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog11/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-11T10:01:00.239Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天又遇到了新的问题，就是后台需要生成一个二维码，以前从来没有做过这个二维码，通过上午的努力，总算是完成了，希望有兴趣的可以一起交流学习。我用的是google.zxing的这个插件来完成生成二维码的，还是很方便的。</code></pre><p>   一.首先需要引入google.zxing的jar包。<br>    我是建的maven工程，因此直接给你上maven的配置，别的可以在网上下载相应的jar包也行。pom.xml配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 二维码 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/javase --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>二.接下来直接上代码：<br>            就是先将需要放在二维码中的数据传进来，生成二维码，然后在将二维码写进一个img中，最后是将这个图片放在了服务器上，然后这个二维码就完成了生成和上传，这次由于项目比较着急，没有时间去研究如何加水印，有兴趣的可以去研究下。<br>   具体的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">private static final int BLACK = 0xff000000;</span><br><span class="line">private static final int WHITE = 0xFFFFFFFF;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param args</span><br><span class="line"> */</span><br><span class="line">public static String tomakeMode(String strJson,String path) &#123;</span><br><span class="line">QsMode test = new QsMode();</span><br><span class="line">String filePostfix=&quot;png&quot;;</span><br><span class="line">String UUID = StringUtil.getUUID();</span><br><span class="line">      File file = new File(path  +UUID + &quot;.&quot;+filePostfix);</span><br><span class="line">test.encode(strJson, file,filePostfix, BarcodeFormat.QR_CODE, 5000, 5000, null);</span><br><span class="line">return UUID+&quot;.png&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  生成QRCode二维码&lt;br&gt; </span><br><span class="line"> *  在编码时需要将com.google.zxing.qrcode.encoder.Encoder.java中的&lt;br&gt;</span><br><span class="line"> *  static final String DEFAULT_BYTE_MODE_ENCODING = &quot;ISO8859-1&quot;;&lt;br&gt;</span><br><span class="line"> *  修改为UTF-8，否则中文编译后解析不了&lt;br&gt;</span><br><span class="line"> * @param contents 二维码的内容</span><br><span class="line"> * @param file 二维码保存的路径，如：C://test_QR_CODE.png</span><br><span class="line"> * @param filePostfix 生成二维码图片的格式：png,jpeg,gif等格式</span><br><span class="line"> * @param format qrcode码的生成格式</span><br><span class="line"> * @param width 图片宽度</span><br><span class="line"> * @param height 图片高度</span><br><span class="line"> * @param hints</span><br><span class="line"> */</span><br><span class="line">public  void encode(String contents, File file,String filePostfix, BarcodeFormat format, int width, int height, Map&lt;EncodeHintType, ?&gt; hints) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">contents = new String(contents.getBytes(&quot;UTF-8&quot;), &quot;ISO-8859-1&quot;); </span><br><span class="line">BitMatrix bitMatrix = new MultiFormatWriter().encode(contents, format, width, height);</span><br><span class="line">writeToFile(bitMatrix, filePostfix, file);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 生成二维码图片&lt;br&gt;</span><br><span class="line"> * </span><br><span class="line"> * @param matrix</span><br><span class="line"> * @param format</span><br><span class="line"> *            图片格式</span><br><span class="line"> * @param file</span><br><span class="line"> *            生成二维码图片位置</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public  static void writeToFile(BitMatrix matrix, String format, File file) throws IOException &#123;</span><br><span class="line">BufferedImage image = toBufferedImage(matrix);</span><br><span class="line">ImageIO.write(image, format, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 生成二维码内容&lt;br&gt;</span><br><span class="line"> * </span><br><span class="line"> * @param matrix</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static BufferedImage toBufferedImage(BitMatrix matrix) &#123;</span><br><span class="line">int width = matrix.getWidth();</span><br><span class="line">int height = matrix.getHeight();</span><br><span class="line">BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">image.setRGB(x, y, matrix.get(x, y) == true ? BLACK : WHITE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>strJson是我向二维码中存入的数据，path是我的存放这个生成的二维码的路径，我是直接生成之后上传到服务器上，然后把下载的路径返回，以后需要的话可以直接下载。UUID是我的一个工具类，用来生成随机的编码的，主要是为了防止生成的二维码的名称重复，为了上传使用。上面的代码也是比较详细的，如果有不懂的地方可以一起讨论，相互学习，这个是原创，转载的话请注明来源。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;今天又遇到了新的问题，就是后台需要生成一个二维码，以前从来没有做过这个二维码，通过上午的努力，总算是完成了，希望有兴趣的可以一起交流学习。我用的是google.zxing的这个插件来完成生成二维码的，还是很方便的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   一.
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://struggling-bird.cn/tags/Spring/"/>
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="二维码" scheme="http://struggling-bird.cn/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务架构之服务的调用</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog6/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog6/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:41:49.980Z</updated>
    
    <content type="html"><![CDATA[<p><strong>微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。接下来分别对这两种的进行讲解。服务的调用还是在上一节<a href="https://blog.csdn.net/zhaokk_git/article/details/80228880" target="_blank" rel="noopener">服务的注册和发现</a>的基础上进行的。</strong><br>一．    <strong>准备工作，</strong>服务的调用基于上一节，服务的注册和发现进行的，因此我们需要先启动上一节的服务注册中心，然后再启动我们需要注册的服务service-hi,然后修改service 的端口号重新启动，访问<strong><a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong>，你会看到如下图则表示我们的准备工作已经完成了。<br> <img src="/2018/08/11/blog6/20180509170634707-1.png" alt="这里写图片描述"></p><p>二．    <strong>创建一个基于Ribbon+restTemplate的服务消费者：ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。</strong></p><ol><li><p>新建一个module，分别引入如下的包，然后finish</p><p><img src="/2018/08/11/blog6/20180509170646527-2.png" alt="这里写图片描述"><br>2.新建好了之后，RibbonApplication中增加注解@bean 将RestTemplate注入到容器中去，</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class RibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(RibbonApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Bean</span><br><span class="line">   @LoadBalanced</span><br><span class="line">   public RestTemplate restTemplate()&#123;</span><br><span class="line">      return  new RestTemplate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3，然后创建一个service类和一个controller类，如图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class service &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public  String  sayHello(String name)&#123;</span><br><span class="line">        return  this.restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot; + name,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service中需要注入的是resttemplate接口,并且可以去访问对应的服务和服务的接口。<br>在创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class controller &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private service service;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br><span class="line">    public String sayHello(String name)&#123;</span><br><span class="line">        return  service.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4，接下来我们需要修改下我们前一节所写的服务，如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@RestController</span><br><span class="line">public class ServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">   String port;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(value = &quot;/hi&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br><span class="line">   public String sayHello(String name)&#123;</span><br><span class="line">      return &quot;I am service-hi ,my port is :&quot; + port + &quot;my name is &quot; + name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5，然后一次重启所有的服务：serverservice1service2Ribbon,然后访问<strong><a href="http://localhost:8080/hello?name=kk" target="_blank" rel="noopener">http://localhost:8080/hello?name=kk</a></strong>,你会发现界面上会重复交替出现两个服务service1和service2的端口号和传递过去的参数。<br><img src="/2018/08/11/blog6/20180509170728714-3.png" alt="这里写图片描述"></p><p>到此Ribbon和restTemplate的消费服务已经完成，接下来我们看看Feign的服务。<br>三．    <strong>创建一个基于Feign去消费服务</strong>：<br>Feign 采用的是基于接口的注解<br>Feign 整合了ribbon<br>1.同理我们也是需要在一的步骤下进行的，必须先开启服务注册中心，并且将我们的服务注册进去，然后新建一个Feign，如图：<br><img src="/2018/08/11/blog6/20180509170739928-4.png" alt="这里写图片描述"></p><p>然后需要创建一个Iservice接口和FeignController类:<br>创建该接口用来调用服务@FeignClient(value = “service-hi”) 注解配置的是服务的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/hi&quot;) //配置的调用的接口</span><br><span class="line">@FeignClient(value = &quot;service-hi&quot;)</span><br><span class="line">@Service</span><br><span class="line">public interface Iservice &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hi&quot;)</span><br><span class="line">     String SayHello(@RequestParam(value = &quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class FeignController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Iservice iservice;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/feign/hello&quot;)</span><br><span class="line">    public String sayHello(String name)&#123;</span><br><span class="line">        return   iservice.SayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置下该启动类，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class FeignApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(FeignApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问：<strong><a href="http://localhost:8080/feign/hello?name=kk" target="_blank" rel="noopener">http://localhost:8080/feign/hello?name=kk</a></strong><br>你会看到如下的界面：<br><img src="/2018/08/11/blog6/20180509170752523-5.png" alt="这里写图片描述"></p><p><strong>以上就是服务的消费的两种方式。</strong></p><p>附上我的完整的博文：<br><strong><a href="https://blog.csdn.net/zhaokk_git/article/details/80228420" target="_blank" rel="noopener">从零开始学习SpringCloud</a></strong><br><strong><a href="https://github.com/zhaokuankuan/springcloud/tree/master/springcloud" target="_blank" rel="noopener">代码地址</a></strong><br><strong>在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！</strong><br><a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">方志鹏的springcloud微服务架构</a><br><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">纯洁的微笑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。接下来分别对这两种的进行讲解。服务的调用还是在上一节
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="SpringCloud" scheme="http://struggling-bird.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud微服务架构之断路器(Hystrix)</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog5/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog5/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:37:24.423Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用，详细使用见<a href="https://blog.csdn.net/zhaokk_git/article/details/80256356" target="_blank" rel="noopener">上一章</a>。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。为了将这种影响降到最低，提出了断路器的概念</strong><br><strong>一．    断路器介绍</strong><br>Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。<br>当较底层的服务出现故障时，会导致连锁故障。当一个服务的不可用达到一定的阈值断路器将会被打开。<br><img src="/2018/08/11/blog5/20180510151201743-1.png" alt="这里写图片描述"><br>断路打开后，可用避免连锁故障，fallback方法返回一个出现故障时的处理方法<br><strong>二．    接下来便分别对Ribbon+resttemplate和feign两种消费服务的方式分别使用断路器进行说明。</strong><br>在此应该首先启动上一节中的服务注册中心和需要注册的服务server和service。<br>Server的端口号是8761，server1和server2的端口号分别是8762和8763。<br><strong>三．    在Ribbon+resttemplate中使用断路器</strong><br>a)    需要先引入断路器的依赖包，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--断路器的依赖包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>b)    在程序的启动类中开启断路器的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableHystrix</span><br><span class="line">public class RibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(RibbonApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Bean</span><br><span class="line">   @LoadBalanced</span><br><span class="line">   public RestTemplate restTemplate()&#123;</span><br><span class="line">      return  new RestTemplate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c)    修改调用服务的方法Service，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class service &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @HystrixCommand(fallbackMethod = &quot;hasError&quot; )</span><br><span class="line">    public  String  sayHello(String name)&#123;</span><br><span class="line">        return  this.restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot; + name,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String hasError(String name)&#123;</span><br><span class="line">        return  &quot;I have a error, so You must restart me!&quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d)    然后停掉第一步启动的两个service1和service2,再次访问<strong><a href="http://localhost:8080/hello?name=kk" target="_blank" rel="noopener">http://localhost:8080/hello?name=kk</a></strong>，会出现如下图的界面<br> <img src="/2018/08/11/blog5/20180510145048845-2.png" alt="这里写图片描述"><br>即，断路器增加成功！当你再次启动一个服务，如server1时，访问上述地址，会得到如下的图示：</p><p><strong>四．    在feign中使用断路器</strong>：<br>Feign是自带断路器的，在D版本的Spring Cloud中，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码：<br>feign.hystrix.enabled=true<br>a)    这个只需要修改接口即可，在上节的基础上我们修改Iserver，首先需要创建一个类实现Iservice接口的方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class IserviceImpl implements Iservice &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String SayHello(String name) &#123;</span><br><span class="line">        return  &quot;I have a error, so You must restart me!&quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b)    然后在修改Iservice中修该fallback指向刚才的实现类，当出现断路时会调用实现类中的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value = &quot;service-hi&quot;,fallback = IserviceImpl.class)</span><br><span class="line">@Service</span><br><span class="line">public interface Iservice &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hi&quot;)</span><br><span class="line">    String SayHello(@RequestParam(value = &quot;name&quot;) String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c)    然后访问，出现我们负载均衡的调用service1和service2，如下图：<br><img src="/2018/08/11/blog5/20180510150843425-3.png" alt="这里写图片描述"></p><p>d)    然后我们停掉service2和service2，再次访问上述的路径，会出现如下图的显示，即说明断路器发挥了作用。<br><img src="/2018/08/11/blog5/20180510150923308-4.png" alt="这里写图片描述"></p><p><strong>五.  断路器仪表盘</strong><br>    这里ribbon和feign两中方式都可以进行，我这里以feign为例，ribbon的和这个一样。<br>a)    首先我们需要在pom中引入，该仪表盘的依赖，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>b)    然后在Application上加上注释，开启注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@EnableHystrixDashboard</span><br><span class="line">public class FeignApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(FeignApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动feign,访问该网址<strong><a href="http://localhost:8080/hystrix" target="_blank" rel="noopener">http://localhost:8080/hystrix</a></strong>，出现图示的界面，<br> <img src="/2018/08/11/blog5/20180510150940272-5.png" alt="这里写图片描述"></p><p>附上我的完整的博文：<br><strong><a href="https://blog.csdn.net/zhaokk_git/article/details/80228420" target="_blank" rel="noopener">从零开始学习SpringCloud</a></strong><br><strong><a href="https://github.com/zhaokuankuan/springcloud/tree/master/springcloud" target="_blank" rel="noopener">代码地址</a></strong><br><strong>在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！</strong><br><a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">方志鹏的springcloud微服务架构</a><br><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">纯洁的微笑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用，详细使用见&lt;a href=&quot;https://blog.csdn.net/zhaokk
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="SpringCloud" scheme="http://struggling-bird.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud微服务架构之服务的注册和发现</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog7/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog7/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T09:45:29.931Z</updated>
    
    <content type="html"><![CDATA[<p><strong>微服务可以在”自己的程序”中运行，并通过”轻量级设备与HTTP型API进行沟通”。关键在于该服务可以在自己的程序中运行。通过这一点我们就可以将服务公开与微服务架构(在现有系统中分布一个API)区分开来。在服务公开中，许多服务都可以被内部独立进程所限制。如果其中任何一个服务需要增加某种功能，那么就必须缩小进程范围。在微服务架构中，只需要在特定的某种服务中增加所需功能，而不影响整体进程。</strong><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上解释来自百度，综上可以看出对于微服务架构来说，服务的注册和服务的发现就很关键了，由于本人接触Dubbo和zookeeper较少因此谈谈Springcloud的注册和发现把。<br><strong>一.新建一个空的maven工程（任何东西都不选)如图</strong><br><img src="/2018/08/11/blog7/20180507173152623.png" alt="这里写图片描述"><br>    Next： 然后填写 GroupId 和 ArtifactId 分别写入的是 包的层次结构基本上是公司的域名或者项目的域名。例 com.kk 或者  com.baidu等<br><strong>二.在新建好的该maven项目中新建两个module分别为server和service作为服务的注册中心和服务的提供方(创建方法类似)。</strong><br><img src="/2018/08/11/blog7/2018050717322387.png" alt="这里写图片描述"><br><img src="/2018/08/11/blog7/20180507173256574.png" alt="这里写图片描述"><br><img src="/2018/08/11/blog7/20180507173310227.png" alt="这里写图片描述"><br><img src="/2018/08/11/blog7/20180507173322191.png" alt="这里写图片描述"><br>注册中心选择server  , 服务提供者选择discovery<br><strong>三.Server的配置，创建一个application.yml文件</strong><br>然后配置yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false #表示是否将自己注册到Eureka Server</span><br><span class="line">    fetch-registry: false #表示是否从Eureka Server获取注册信息</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/   #注册中心的地址</span><br></pre></td></tr></table></figure><p>然后启动server的这个项目，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a>   你就看到如下的界面<br><img src="/2018/08/11/blog7/2018050717333577.png" alt="这里写图片描述"><br>说明注册中心已经配置完成，只是里面没有注册服务。<br>Ps：在这里说一下，因为我们在做分布式部署的时候为了保证项目的健壮性我们通常会采用集群部署，因为可以参考微笑的博客来设置注册中心的集群。<br><strong>四.接下来我们应该向注册中心注册服务了，首先创建application.yml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在ServiceApplication类中开启服务发现的注解</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后配置yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`server:</span><br><span class="line">  port: 8762 #设置服务的端口号</span><br><span class="line">client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-A</span><br></pre></td></tr></table></figure><p>`<br>然后再次访问注册中心，你就发现我们的服务已经注册进去了。<br><img src="/2018/08/11/blog7/20180507173351441.png" alt="这里写图片描述"><br><strong>到此，springcloud的服务的注册和发现已经完成。</strong><br>在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！<br><a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">方志鹏的springcloud微服务架构</a><br><a href="http://www.ityouknow.com/spring-cloud.html" target="_blank" rel="noopener">纯洁的微笑</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;微服务可以在”自己的程序”中运行，并通过”轻量级设备与HTTP型API进行沟通”。关键在于该服务可以在自己的程序中运行。通过这一点我们就可以将服务公开与微服务架构(在现有系统中分布一个API)区分开来。在服务公开中，许多服务都可以被内部独立进程所限制。如果其
      
    
    </summary>
    
      <category term="微服务架构" scheme="http://struggling-bird.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="SpringCloud" scheme="http://struggling-bird.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>springboot项目的搭建和基本的用法</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog8/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog8/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-16T04:29:10.358Z</updated>
    
    <content type="html"><![CDATA[<p>初涉springboot，学习小记，用于学习，简单介绍下如何去创建一个简单的的springboot工程。本人这里使用idea操作的。<br><strong>一.首先需要创建一个工程：new project,选择Spring Initalizr。</strong><br><img src="/2018/08/11/blog8/20180509172029526.png" alt="这里写图片描述"><br>输入项目的目录结构和项目的名称，如图：<br><img src="/2018/08/11/blog8/20180509172333830.png" alt="这里写图片描述"><br>然后选择你需要导入的jar包，如下：<br><img src="/2018/08/11/blog8/20180509172423241.png" alt="这里写图片描述"><br>web是web项目的核心启动包，devtools是一个web项目的工具包。</p><p><strong>二.然后你的一个springboot项目便创建完成。</strong><br>如图我们可以创建这个项目的目录结构，但是需要注意一点的是，包的结构必须和TestApplication是在一级上。<br> <img src="/2018/08/11/blog8/20180509172740232.png" alt="这里写图片描述"><br>在controller里面创建一个类，HelloController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/hello&quot;)</span><br><span class="line">    public  String sayHello()&#123;</span><br><span class="line">        return  &quot;Hello , my First demo!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后我们启动这个工程，然后访问一下！</strong><br><img src="/2018/08/11/blog8/20180509173207746.png" alt="这里写图片描述"><br>如上图所示我们的项目就已经构建完成了，然后具体的项目的热部署和项目的过滤器和测试等都在我下面的笔记中有，也可以看我的github，查看我的代码！</p><p><strong>笔记</strong>：</p><blockquote><p><strong>1.springboot的创建：</strong>     idea的情况下，选择Spring Initializr 然后配置 web 和 devtools 一个是启动的web的核心依赖一个是开发工具包<br><strong>2.创建热部署</strong>     idea下，pom中修改 devtools的optional为true 则为热部署开启     plugin 下增加configuration –》fork 为true     接下来在build<br>里面选择自动构建；ctrl+shift+a：输入register<br>窜则compile.automake.allow.when.app.running<br><strong>3.单元测试</strong>     先创建mockmvc，静态的加载：ockMvcBuilders.standaloneSetup(new HelloWorldController()).build();<br>    mockmvc.perform()调用mockmvcRequestBuilders.post/get方法，.parm()加参数–》键值对类型,anddo（print()）可以打印<br><strong>4json的支持</strong>     在 Spring Boot 体系中，天然对 Json 支持，@restController<br><strong>5.请求传参</strong>     例如@RequestMapping(value=”get/{name}”, method=RequestMethod.GET)     public User get(@PathVariable String name)<br>{         this.name = name;     }<br><strong>6.参数校验</strong>     实体类上可以加@NotEmpty，@Max，@Min，@Length来设置属性的校验     Spring Boot 的参数校验其实是依赖于 hibernate-validator 来进行     public void saveUser(@Valid User<br>user,BindingResult result){         List<objecterror> list =<br>result.getAllErrors(); //能够得到所有的校验的结果     }<br><strong>7.自定义过滤</strong>     自定义的过滤必须实现Filter接口并实现方法，在doFilter里面写上自己的过滤处理     @Configuration说明是个配置类，用来存放配置信息，     @bean 说明该方法作为一个配置信息被spring监控，<br>    public FilterRegistrationBean testFilterRegistration() {<br>       FilterRegistrationBean registration = new FilterRegistrationBean();<br>       registration.setFilter(new MyFilter());<br>       registration.addUrlPatterns(“/*”);<br>       registration.addInitParameter(“paramName”, “paramValue”);<br>       registration.setName(“MyFilter”);<br>       registration.setOrder(1);<br>       return registration;<br>    }</objecterror></p></blockquote><p><a href="https://github.com/zhaokuankuan/springboot-basic" target="_blank" rel="noopener">代码地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初涉springboot，学习小记，用于学习，简单介绍下如何去创建一个简单的的springboot工程。本人这里使用idea操作的。&lt;br&gt;&lt;strong&gt;一.首先需要创建一个工程：new project,选择Spring Initalizr。&lt;/strong&gt;&lt;br&gt;&lt;i
      
    
    </summary>
    
      <category term="javaWeb" scheme="http://struggling-bird.cn/categories/javaWeb/"/>
    
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
      <category term="Springboot" scheme="http://struggling-bird.cn/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于Maven的搭建SSM框架的详细说明</title>
    <link href="http://struggling-bird.cn/2018/08/11/blog9/"/>
    <id>http://struggling-bird.cn/2018/08/11/blog9/</id>
    <published>2018-08-11T09:34:31.000Z</published>
    <updated>2018-08-12T10:02:43.465Z</updated>
    
    <content type="html"><![CDATA[<p>  <strong>SSM（Spring+SpringMVC+Mybatis）</strong>，目前较为主流的企业级架构方案。标准的MVC设计模式，将整个系统划分为显示层、Controller层、Service层、Dao层四层，使用SpringMVC负责请求的转发和视图管理，Spring实现业务对象管理, MyBatis作为数据对象持久化引擎，以上说明来自百度。</p><p>这个框架相信对于大家来说都不会太陌生，用的都比较多，本猿作作为一名萌新，入职以来虽然一直都在使用SSM框架但是对于该框架的搭建不是很了解，借此次项目的机会搭建了一次并且成功，很是喜悦，因此记录下来方便以后查看，也为像本猿一样的新人提供一点帮助。</p><p>一.环境的准备搭建</p><p>首先你需要创建一个maven项目，本猿用的是StS大家可以根据自己的喜好选择。</p><p>1.先创建一个maven项目</p><p><img src="/2018/08/11/blog9/1.png" alt="这里写图片描述"></p><p>2.选择该项</p><p><img src="/2018/08/11/blog9/2.png" alt="这里写图片描述"></p><p>3.接下来输入你的项目的名称和包的目录结构</p><p><img src="/2018/08/11/blog9/3.png" alt="这里写图片描述"></p><p>4.然后项目就创建完成了，接下来你需要创建src/main/resources、src/main/java、src/test/resources、src/test/java，创建完之后项目的结构如图所示。<br><img src="/2018/08/11/blog9/4.png" alt="这里写图片描述"></p><p>5.然后分别修改输出的路径。</p><p><img src="/2018/08/11/blog9/5.png" alt="这里写图片描述"></p><p>到此，项目的创建工作基本上就完成了，接下里就需要进行框架的整合了，框架的整合我分为两部分来做的，第一部分先整合Spring和Mybatis的框架</p><p>，接下来是整合springMvc的。</p><p>二、Spring和Mybatis</p><p>我先一次给出我导入的所有的jar包，上面都有很详细的注释的，应该可以看懂的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.ssm&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;SSM&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;SSM Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">   &lt;properties&gt;</span><br><span class="line">        &lt;spring.version&gt;4.0.2.RELEASE&lt;/spring.version&gt;</span><br><span class="line">        &lt;mybatis.version&gt;3.2.6&lt;/mybatis.version&gt;</span><br><span class="line">        &lt;!-- log4j日志文件管理包版本 --&gt;</span><br><span class="line">        &lt;slf4j.version&gt;1.7.7&lt;/slf4j.version&gt;</span><br><span class="line">        &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">  &lt;!-- junit的测试包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">      &lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- spring核心包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringmVC包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- mybatis包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- mybatis/spring包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- 导入java ee jar 包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- 导入Mysql数据库链接jar包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.30&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- alibaba 数据源相关jar包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.2.23&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;!-- 日志文件管理包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- 格式化对象，方便输出日志 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.41&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- 映入JSON --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!-- 上传组件包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;SSM&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>1.先配置创建一个xml来放spring和mybatis的配置文件，主要存放的是自动扫描、自动注入和数据库的配置等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">spring-mybatis.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/context</span><br><span class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/mvc</span><br><span class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 自动扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.ssm&quot; /&gt;</span><br><span class="line">    &lt;!-- 引入配置文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;propertyConfigurer&quot;</span><br><span class="line">        class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;location&quot; value=&quot;classpath:jdbc.properties&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;</span><br><span class="line">        destroy-method=&quot;close&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;driver&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt;</span><br><span class="line">        &lt;!-- 初始化连接大小 --&gt;</span><br><span class="line">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;initialSize&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 连接池最大数量 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;maxActive&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 连接池最大空闲 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;maxIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 连接池最小空闲 --&gt;</span><br><span class="line">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 获取连接最大等待时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxWait&quot; value=&quot;$&#123;maxWait&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">        &lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/ssm/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.ssm.dao&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>2.配置log日志(此配置方法来自网络)</p><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,Console,File</span><br><span class="line">#定义日志输出目的地为控制台</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target=System.out</span><br><span class="line">#可以灵活地指定日志输出格式，下面一行是指定具体的格式</span><br><span class="line">log4j.appender.Console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n</span><br><span class="line"></span><br><span class="line">#文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="line">log4j.appender.File = org.apache.log4j.RollingFileAppender</span><br><span class="line">#指定输出目录</span><br><span class="line">log4j.appender.File.File = logs/ssm.log</span><br><span class="line">#定义文件最大大小</span><br><span class="line">log4j.appender.File.MaxFileSize = 10MB</span><br><span class="line"># 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志</span><br><span class="line">log4j.appender.File.Threshold = ALL</span><br><span class="line">log4j.appender.File.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern =[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n</span><br></pre></td></tr></table></figure><p>3.配置数据库的连接</p><p>jdbc.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">username=root</span><br><span class="line">password=</span><br><span class="line">#定义初始连接数</span><br><span class="line">initialSize=0</span><br><span class="line">#定义最大连接数</span><br><span class="line">maxActive=20</span><br><span class="line">#定义最大空闲</span><br><span class="line">maxIdle=20</span><br><span class="line">#定义最小空闲</span><br><span class="line">minIdle=1</span><br><span class="line">#定义最长等待时间</span><br><span class="line">maxWait=60000</span><br></pre></td></tr></table></figure><p>到此Spring和mybatis的配置就完成了，接下来就剩下整合SpringMvc了，我先吧所有的配置完成之后再上我的测试代码吧。</p><p>三.Spring MVC 的配置</p><p>主要是配置自动扫描，和注解的启动和拦截器等。</p><p>1.先新建SpringMVC的配置文件。</p><p>spring-mvc.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/context</span><br><span class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</span><br><span class="line">                        http://www.springframework.org/schema/mvc</span><br><span class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 自动扫描该包，使SpringMVC认为包下用了@RestController注解的类是控制器 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.ssm.controller&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;mappingJacksonHttpMessageConverter&quot;</span><br><span class="line">        class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span><br><span class="line">    &lt;bean</span><br><span class="line">        class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;messageConverters&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=&quot;mappingJacksonHttpMessageConverter&quot; /&gt; &lt;!-- JSON转换器 --&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;mvc:annotation-driven &gt;</span><br><span class="line">        &lt;mvc:message-converters&gt;</span><br><span class="line">            &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;features&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">            &lt;value&gt;DisableCircularReferenceDetect &lt;/value&gt;</span><br><span class="line">            &lt;value&gt;WriteMapNullValue&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;WriteNullListAsEmpty&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;WriteNullStringAsEmpty&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/mvc:message-converters&gt;</span><br><span class="line">    &lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span><br><span class="line">    &lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line">        class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 默认编码 --&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot; /&gt;</span><br><span class="line">        &lt;!-- 文件大小最大值 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760000&quot; /&gt;</span><br><span class="line">        &lt;!-- 内存中的最大值 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxInMemorySize&quot; value=&quot;40960&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>四 .接下来是在web.xml中将SpringMVC和前面的东西进行整合。</p><p>web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br><span class="line">    version=&quot;3.0&quot;&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">   &lt;!-- Spring和mybatis的配置文件 --&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:spring-mybatis.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">    &lt;!--数据库的配置--&gt;</span><br><span class="line">   &lt;!-- 配置程序参数文件 --&gt;</span><br><span class="line">   &lt;!-- 编码过滤器 --&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;async-supported&gt;true&lt;/async-supported&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">    &lt;!-- Spring监听器 --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line">    &lt;!-- 防止Spring内存溢出监听器 --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring MVC servlet --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">        &lt;async-supported&gt;true&lt;/async-supported&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>到此，SSM三大框架的整合就全部完成了，现在我上一下我的测试代码，你们可以进行参考。代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;strong&gt;SSM（Spring+SpringMVC+Mybatis）&lt;/strong&gt;，目前较为主流的企业级架构方案。标准的MVC设计模式，将整个系统划分为显示层、Controller层、Service层、Dao层四层，使用SpringMVC负责请求的转发和视图管
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://struggling-bird.cn/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://struggling-bird.cn/tags/Spring/"/>
    
      <category term="SpringMvc" scheme="http://struggling-bird.cn/tags/SpringMvc/"/>
    
      <category term="MyBatis" scheme="http://struggling-bird.cn/tags/MyBatis/"/>
    
      <category term="java" scheme="http://struggling-bird.cn/tags/java/"/>
    
  </entry>
  
</feed>
