{"meta":{"title":"奋斗的小鸟","subtitle":null,"description":null,"author":"奋斗的小鸟","url":"http://yoursite.com"},"pages":[{"title":"友情链接","date":"2018-08-10T04:53:59.873Z","updated":"2018-08-07T08:29:54.577Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-08-10T04:57:57.194Z","updated":"2018-08-07T08:29:54.592Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-06-30T09:16:13.787Z","updated":"2018-06-30T09:16:13.787Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-08-10T04:59:08.860Z","updated":"2018-08-10T04:59:08.797Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Tags","date":"2018-06-30T09:16:13.787Z","updated":"2018-06-30T09:16:13.787Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"springboot项目的搭建和基本的用法","slug":"springboot项目的搭建和基本的用法","date":"2018-07-03T04:11:36.000Z","updated":"2018-07-03T04:13:38.357Z","comments":true,"path":"2018/07/03/springboot项目的搭建和基本的用法/","link":"","permalink":"http://yoursite.com/2018/07/03/springboot项目的搭建和基本的用法/","excerpt":"","text":"初涉springboot，学习小记，用于学习，简单介绍下如何去创建一个简单的的springboot工程。本人这里使用idea操作的。一.首先需要创建一个工程：new project,选择Spring Initalizr。输入项目的目录结构和项目的名称，如图：然后选择你需要导入的jar包，如下：web是web项目的核心启动包，devtools是一个web项目的工具包。 二.然后你的一个springboot项目便创建完成。如图我们可以创建这个项目的目录结构，但是需要注意一点的是，包的结构必须和TestApplication是在一级上。 在controller里面创建一个类，HelloController 123456789@RestControllerpublic class HelloController &#123; @RequestMapping(value = &quot;/hello&quot;) public String sayHello()&#123; return &quot;Hello , my First demo!&quot;; &#125;&#125; 然后我们启动这个工程，然后访问一下！如上图所示我们的项目就已经构建完成了，然后具体的项目的热部署和项目的过滤器和测试等都在我下面的笔记中有，也可以看我的github，查看我的代码！ 笔记： 1.springboot的创建： idea的情况下，选择Spring Initializr 然后配置 web 和 devtools 一个是启动的web的核心依赖一个是开发工具包2.创建热部署 idea下，pom中修改 devtools的optional为true 则为热部署开启 plugin 下增加configuration –》fork 为true 接下来在build里面选择自动构建；ctrl+shift+a：输入register窜则compile.automake.allow.when.app.running3.单元测试 先创建mockmvc，静态的加载：ockMvcBuilders.standaloneSetup(new HelloWorldController()).build(); mockmvc.perform()调用mockmvcRequestBuilders.post/get方法，.parm()加参数–》键值对类型,anddo（print()）可以打印4json的支持 在 Spring Boot 体系中，天然对 Json 支持，@restController5.请求传参 例如@RequestMapping(value=”get/{name}”, method=RequestMethod.GET) public User get(@PathVariable String name){ this.name = name; }6.参数校验 实体类上可以加@NotEmpty，@Max，@Min，@Length来设置属性的校验 Spring Boot 的参数校验其实是依赖于 hibernate-validator 来进行 public void saveUser(@Valid Useruser,BindingResult result){ List list =result.getAllErrors(); //能够得到所有的校验的结果 }7.自定义过滤 自定义的过滤必须实现Filter接口并实现方法，在doFilter里面写上自己的过滤处理 @Configuration说明是个配置类，用来存放配置信息， @bean 说明该方法作为一个配置信息被spring监控， public FilterRegistrationBean testFilterRegistration() { FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new MyFilter()); registration.addUrlPatterns(“/*”); registration.addInitParameter(“paramName”, “paramValue”); registration.setName(“MyFilter”); registration.setOrder(1); return registration; } 代码地址","categories":[],"tags":[]},{"title":"Springcloud微服务架构之服务的注册和发现","slug":"Springcloud微服务架构之服务的注册和发现","date":"2018-07-03T04:11:22.000Z","updated":"2018-07-03T04:12:47.026Z","comments":true,"path":"2018/07/03/Springcloud微服务架构之服务的注册和发现/","link":"","permalink":"http://yoursite.com/2018/07/03/Springcloud微服务架构之服务的注册和发现/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微服务可以在”自己的程序”中运行，并通过”轻量级设备与HTTP型API进行沟通”。关键在于该服务可以在自己的程序中运行。通过这一点我们就可以将服务公开与微服务架构(在现有系统中分布一个API)区分开来。在服务公开中，许多服务都可以被内部独立进程所限制。如果其中任何一个服务需要增加某种功能，那么就必须缩小进程范围。在微服务架构中，只需要在特定的某种服务中增加所需功能，而不影响整体进程。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上解释来自百度，综上可以看出对于微服务架构来说，服务的注册和服务的发现就很关键了，由于本人接触Dubbo和zookeeper较少因此谈谈Springcloud的注册和发现把。一.新建一个空的maven工程（任何东西都不选)如图 Next： 然后填写 GroupId 和 ArtifactId 分别写入的是 包的层次结构基本上是公司的域名或者项目的域名。例 com.kk 或者 com.baidu等二.在新建好的该maven项目中新建两个module分别为server和service作为服务的注册中心和服务的提供方(创建方法类似)。注册中心选择server , 服务提供者选择discovery三.Server的配置，创建一个application.yml文件然后配置yml 12345678910server: port: 8761eureka: instance: hostname: localhost client: register-with-eureka: false #表示是否将自己注册到Eureka Server fetch-registry: false #表示是否从Eureka Server获取注册信息 service-url: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ #注册中心的地址 然后启动server的这个项目，访问http://localhost:8761/ 你就看到如下的界面说明注册中心已经配置完成，只是里面没有注册服务。Ps：在这里说一下，因为我们在做分布式部署的时候为了保证项目的健壮性我们通常会采用集群部署，因为可以参考微笑的博客来设置注册中心的集群。四.接下来我们应该向注册中心注册服务了，首先创建application.yml文件 123456789在ServiceApplication类中开启服务发现的注解@SpringBootApplication@EnableEurekaClientpublic class ServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServiceApplication.class, args); &#125;&#125; 然后配置yml 12345678`server: port: 8762 #设置服务的端口号client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: service-A `然后再次访问注册中心，你就发现我们的服务已经注册进去了。到此，springcloud的服务的注册和发现已经完成。在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！方志鹏的springcloud微服务架构纯洁的微笑","categories":[],"tags":[]},{"title":"SpringCloud微服务架构之服务的调用","slug":"SpringCloud微服务架构之服务的调用","date":"2018-07-03T04:10:50.000Z","updated":"2018-07-03T04:12:31.730Z","comments":true,"path":"2018/07/03/SpringCloud微服务架构之服务的调用/","link":"","permalink":"http://yoursite.com/2018/07/03/SpringCloud微服务架构之服务的调用/","excerpt":"","text":"微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。接下来分别对这两种的进行讲解。服务的调用还是在上一节服务的注册和发现的基础上进行的。一． 准备工作，服务的调用基于上一节，服务的注册和发现进行的，因此我们需要先启动上一节的服务注册中心，然后再启动我们需要注册的服务service-hi,然后修改service 的端口号重新启动，访问http://localhost:8761/，你会看到如下图则表示我们的准备工作已经完成了。 二． 创建一个基于Ribbon+restTemplate的服务消费者：ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。 新建一个module，分别引入如下的包，然后finish 2.新建好了之后，RibbonApplication中增加注解@bean 将RestTemplate注入到容器中去， 12345678910111213@SpringBootApplicationpublic class RibbonApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(RibbonApplication.class, args); &#125; @Bean @LoadBalanced public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; 3，然后创建一个service类和一个controller类，如图 1234567891011@Servicepublic class service &#123; @Autowired private RestTemplate restTemplate; public String sayHello(String name)&#123; return this.restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot; + name,String.class); &#125;&#125; Service中需要注入的是resttemplate接口,并且可以去访问对应的服务和服务的接口。在创建一个 123456789101112@RestControllerpublic class controller &#123; @Autowired private service service; @RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;) public String sayHello(String name)&#123; return service.sayHello(name); &#125;&#125; 4，接下来我们需要修改下我们前一节所写的服务，如图： 1234567891011121314151617@SpringBootApplication@EnableDiscoveryClient@RestControllerpublic class ServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServiceApplication.class, args); &#125; @Value(&quot;$&#123;server.port&#125;&quot;) String port; @RequestMapping(value = &quot;/hi&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;) public String sayHello(String name)&#123; return &quot;I am service-hi ,my port is :&quot; + port + &quot;my name is &quot; + name; &#125;&#125; 5，然后一次重启所有的服务：serverservice1service2Ribbon,然后访问http://localhost:8080/hello?name=kk,你会发现界面上会重复交替出现两个服务service1和service2的端口号和传递过去的参数。 到此Ribbon和restTemplate的消费服务已经完成，接下来我们看看Feign的服务。三． 创建一个基于Feign去消费服务：Feign 采用的是基于接口的注解Feign 整合了ribbon1.同理我们也是需要在一的步骤下进行的，必须先开启服务注册中心，并且将我们的服务注册进去，然后新建一个Feign，如图： 然后需要创建一个Iservice接口和FeignController类:创建该接口用来调用服务@FeignClient(value = “service-hi”) 注解配置的是服务的名称 12345678@RequestMapping(&quot;/hi&quot;) //配置的调用的接口@FeignClient(value = &quot;service-hi&quot;)@Servicepublic interface Iservice &#123; @RequestMapping(&quot;/hi&quot;) String SayHello(@RequestParam(value = &quot;name&quot;) String name);&#125; 123456789101112@RestControllerpublic class FeignController &#123; @Autowired private Iservice iservice; @RequestMapping(value = &quot;/feign/hello&quot;) public String sayHello(String name)&#123; return iservice.SayHello(name); &#125;&#125; 配置下该启动类，如下： 12345678@SpringBootApplication@EnableFeignClientspublic class FeignApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(FeignApplication.class, args); &#125;&#125; 然后访问：http://localhost:8080/feign/hello?name=kk你会看到如下的界面： 以上就是服务的消费的两种方式。 附上我的完整的博文：从零开始学习SpringCloud代码地址在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！方志鹏的springcloud微服务架构纯洁的微笑","categories":[],"tags":[]},{"title":"Springcloud微服务架构之断路器(Hystrix)","slug":"Springcloud微服务架构之断路器-Hystrix","date":"2018-07-03T04:10:31.000Z","updated":"2018-07-03T04:12:17.209Z","comments":true,"path":"2018/07/03/Springcloud微服务架构之断路器-Hystrix/","link":"","permalink":"http://yoursite.com/2018/07/03/Springcloud微服务架构之断路器-Hystrix/","excerpt":"","text":"在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用，详细使用见上一章。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。为了将这种影响降到最低，提出了断路器的概念一． 断路器介绍Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。当较底层的服务出现故障时，会导致连锁故障。当一个服务的不可用达到一定的阈值断路器将会被打开。断路打开后，可用避免连锁故障，fallback方法返回一个出现故障时的处理方法二． 接下来便分别对Ribbon+resttemplate和feign两种消费服务的方式分别使用断路器进行说明。在此应该首先启动上一节中的服务注册中心和需要注册的服务server和service。Server的端口号是8761，server1和server2的端口号分别是8762和8763。三． 在Ribbon+resttemplate中使用断路器a) 需要先引入断路器的依赖包，如下 123456&lt;!--断路器的依赖包--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt; &lt;version&gt;1.3.1.RELEASE&lt;/version&gt;&lt;/dependency&gt; b) 在程序的启动类中开启断路器的注解 1234567891011121314@SpringBootApplication@EnableHystrixpublic class RibbonApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(RibbonApplication.class, args); &#125; @Bean @LoadBalanced public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; c) 修改调用服务的方法Service，如下： 123456789101112131415@Servicepublic class service &#123; @Autowired private RestTemplate restTemplate; @HystrixCommand(fallbackMethod = &quot;hasError&quot; ) public String sayHello(String name)&#123; return this.restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot; + name,String.class); &#125; public String hasError(String name)&#123; return &quot;I have a error, so You must restart me!&quot; + name; &#125;&#125; d) 然后停掉第一步启动的两个service1和service2,再次访问http://localhost:8080/hello?name=kk，会出现如下图的界面 即，断路器增加成功！当你再次启动一个服务，如server1时，访问上述地址，会得到如下的图示： 四． 在feign中使用断路器：Feign是自带断路器的，在D版本的Spring Cloud中，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码：feign.hystrix.enabled=truea) 这个只需要修改接口即可，在上节的基础上我们修改Iserver，首先需要创建一个类实现Iservice接口的方法，如下： 123456public class IserviceImpl implements Iservice &#123; @Override public String SayHello(String name) &#123; return &quot;I have a error, so You must restart me!&quot; + name; &#125;&#125; b) 然后在修改Iservice中修该fallback指向刚才的实现类，当出现断路时会调用实现类中的方法。 1234567@FeignClient(value = &quot;service-hi&quot;,fallback = IserviceImpl.class)@Servicepublic interface Iservice &#123; @RequestMapping(&quot;/hi&quot;) String SayHello(@RequestParam(value = &quot;name&quot;) String name);&#125; c) 然后访问，出现我们负载均衡的调用service1和service2，如下图： d) 然后我们停掉service2和service2，再次访问上述的路径，会出现如下图的显示，即说明断路器发挥了作用。 五. 断路器仪表盘 这里ribbon和feign两中方式都可以进行，我这里以feign为例，ribbon的和这个一样。a) 首先我们需要在pom中引入，该仪表盘的依赖，如下：123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;&lt;version&gt;1.4.1.RELEASE&lt;/version&gt;&lt;/dependency&gt; b) 然后在Application上加上注释，开启注解 123456789@SpringBootApplication@EnableFeignClients@EnableHystrixDashboardpublic class FeignApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(FeignApplication.class, args); &#125;&#125; 然后启动feign,访问该网址http://localhost:8080/hystrix，出现图示的界面， 附上我的完整的博文：从零开始学习SpringCloud代码地址在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！方志鹏的springcloud微服务架构纯洁的微笑","categories":[],"tags":[]},{"title":"从零开始学习SpringCloud","slug":"Springcloud微服务架构之路由网关(zuul)","date":"2018-07-03T04:08:24.000Z","updated":"2018-07-03T04:09:50.798Z","comments":true,"path":"2018/07/03/Springcloud微服务架构之路由网关(zuul)/","link":"","permalink":"http://yoursite.com/2018/07/03/Springcloud微服务架构之路由网关(zuul)/","excerpt":"","text":"Springcloud微服务架构之路由网关(zuul) Zuul的主要功能是路由转发和过滤器: 1.路由功能是微服务的一部分，比如将 API-A转发到service-hi服务,zuul默认和Ribbon结合 实现了负载均衡的功能。 2.zuul不仅只是路由，并且还能过滤，做一些安全验证。 一． 接下来我们分别看一下，Zuul的路由转发和过滤器 首先还是在上一节的服务的注册和发现的基础上进行的，我们需要先启动Server(服务的注册中心):8761，然后启动我们的一个服务Service(需要注册的服务):8762。二． 路由转发：路由功能是微服务的一部分，比如将API-A转发到service-hia) 创建一个module项目rest-client b) 然后新建一个appliacation.yml,配置内容如下，我们将这个服务注册进eureka注册中心中，然后设置zuul的路由，当访问API-A 的时候我们将请求的理由到service-HI服务中去。 1234567891011121314server: port: 8088eureka: client: service-url: defaultZone: http://localhost:8761/eurekaspring: application: name: service-zuulzuul: routes: API-A: path: /API-A/** serviceId: SERVICE-HI c) 然后我们修改RestClientApplication 这个类，增加zuul开启路由的注解 12345678@SpringBootApplication@EnableZuulProxy@EnableEurekaClientpublic class RestClientApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(RestClientApplication.class, args); &#125;&#125; d) 分别访问http://localhost:8761/你会看到如下的图示，有我们注入的zuul和需要路由的serice-hi服务。 在访问http://localhost:8088/API-A/hello?name=kk，你会看到，我们的如图所示，即我们的路由已经成功的将api-a转发到了serive-hi的服务，并且输出了service-hi的端口，具体的代码可以看文章的结尾。 三 过滤功能：zuul不仅可以做为路由使用，还可以用作过滤来做一些逻辑操作a) 在上面的基础上进行改造，创建一个类MyFilter具体的说明已经注释出来了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * @author :zhaokk * @date: 2018/5/11 - 14:58 */@Componentpublic class MyFilter extends ZuulFilter &#123; private static Logger logger = LoggerFactory.getLogger(ZuulFilter.class); @Override public String filterType() &#123; return &quot;pre&quot;; //pre：路由之前 //routing：路由之时 //post： 路由之后 //error：发送错误调用 &#125; @Override public int filterOrder() &#123; return 0; //优先级 0 最高 &#125; @Override public boolean shouldFilter() &#123; return true; //true为永远过滤 &#125; @Override public Object run() throws ZuulException &#123; RequestContext requestContext = RequestContext.getCurrentContext(); HttpServletRequest httpServletRequest = requestContext.getRequest(); Object o = httpServletRequest.getParameter(&quot;token&quot;); if(o == null)&#123; logger.warn(&quot;token is empty&quot;); requestContext.setSendZuulResponse(false); requestContext.setResponseStatusCode(401); try &#123; requestContext.getResponse().getWriter().write(&quot;token is empty!&quot;); &#125;catch (Throwable throwable)&#123; return null; &#125; &#125; logger.info(&quot;ok&quot;); return null; &#125;&#125; b) 然后我们继续访问http://localhost:8088/API-A/hello?name=kk，这时你会看到，界面如图，因为我们的代码中获取不到token，所以被拦截了， c） 当我们输入http://localhost:8088/API-A/hello?name=kk&amp;token=22，会显示 如下的界面，即我们的过滤功能有效了！ 附上我的完整的博文：从零开始学习SpringCloud代码地址在此感谢，两位大佬的博客，我是根据以上大佬的博客学习的！ 方志鹏的springcloud微服务架构 纯洁的微笑","categories":[],"tags":[]},{"title":"从零开始学习SpringCloud","slug":"从零开始学习SpringCloud","date":"2018-07-03T04:08:24.000Z","updated":"2018-07-03T04:08:39.549Z","comments":true,"path":"2018/07/03/从零开始学习SpringCloud/","link":"","permalink":"http://yoursite.com/2018/07/03/从零开始学习SpringCloud/","excerpt":"","text":"&#160; &#160; &#160;前段时间把SpringBoot刷了一遍，感觉是时候深入研究一下微服务架构了，在网上看到了方志鹏的书，觉得不错便关注了他的博客，由于前期一直关注微笑并且跟着微笑的达人课完成了SpringBoot的入门，因此在此感谢两位大佬，令附上两位大佬的博客地址。 ==》springboot的入门 &#160; &#160; &#160;我将springcloud处理微服务架构分为下面的模块进行慢慢的蚕食： &#160; &#160; &#160;1. 服务的注册和发现 &#160; &#160; &#160;2. 断路器 &#160; &#160; &#160;3. 服务调用&#160; &#160; &#160;4. 路由网关 &#160; &#160; &#160;5. 分布式配置中心 &#160; &#160; &#160;6. 消息总线 &#160; &#160; &#160;7. 服务链路追踪 &#160; &#160; &#160; &#160; &#160; &#160;未完待续中。。。 &#160; &#160; &#160;附上我的github地址，从零开始学习springcloud 以下是我自己对上述模块的认识和分析： &#160; &#160; &#160;1. 在服务的注册和发现和调用之间有三个模块： 注册中心,服务提供者，服务消费者 &#160;&#160; &#160;2. 启动的时候先启动注册中心==》提供者==》消费者 &#160; &#160;&#160;3.可以对注册中心进行负载均衡也可以对服务的调用进行负载均衡对注册中心：通过修改 defaultZone: http://localhost:8761/eureka/，http://localhost:8762/eureka/，http://localhost:8763/eureka/来实现&#160; &#160; &#160;对服务的调用： ribbon + resttmplate 是客户端的一种负载均衡的方式&#160; &#160; &#160;feign :原理也是基于ribbon实现的。只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。&#160; &#160; &#160;4.断路器：为了保证服务的高可用，引入了断路器的概念，当访问一个服务的不可用得到了一定的阈值时，断路器将会被打开 &#160; &#160; &#160;两种实现： &#160; &#160; &#160; (1).restTemplate 和 ribbon 方式，需要在调用的服务上增加熔断的方法即可 &#160; &#160; &#160; (2).feign，需要在接口的FeignClient注解中增加callback方法即可，指向该接口的实现类，该实现类中重写的方法即出现断路时调用的方法。&#160; &#160; &#160;5.路由网关(zuul)：主要做的是路由的转发和过滤，zuul默认和Ribbon结合实现了负载均衡的功能。 &#160; &#160; &#160; (1).路由的转发，类似于nigix反向代理，将对应的路径代理到对应的服务器上去 &#160; &#160; &#160; (2).路由的过滤，通过自定义过滤器，然后继承zuulfilter来自定义过滤的类型和优先级和逻辑等 &#160; &#160;&#160;6.分布式配置中心(Configure)：在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件 &#160; &#160; &#160; 分为两个角色：分别是配置的服务器和配置的客户端 &#160; &#160; &#160;延伸到微服务可以将配置中心做成一个微服务，并且将其集群 &#160; &#160;&#160;7.消息总线(Bus)：消息总线将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控 &#160; &#160; &#160;主要是rabbitmq的用法 &#160; &#160; &#160;8.服务链路追踪(Sleuth):在分布式系统中提供追踪解决方案 &#160; &#160; &#160; 对于微服务架构，启动的时候会启动一个Trace，一系列spans组成的一个树状结构 &#160; &#160; &#160; 在访问的时候会跟随目前访问的位置和所用的时间，可以快速的反应和查找问题 &#160; &#160; &#160; ZipkinServer ==》用来收集调用信息 &#160; &#160; &#160; 9.docker部署springcloud项目 &#160; &#160;&#160;10.服务注册(consul):它是一个提供服务发现和配置的工具,consul具有分布式、高可用、高扩展性。 以上学习资源来自：方志鹏的springcloud微服务架构纯洁的微笑","categories":[],"tags":[]}]}